<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[concise notes]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="https://vhf.github.io/blog/"/>
  <updated>2016-02-04T19:02:33.000Z</updated>
  <id>https://vhf.github.io/blog/</id>
  
  <author>
    <name><![CDATA[victor felder]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[The dangers of HFS+ for git repositories]]></title>
    <link href="https://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/"/>
    <id>https://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/</id>
    <published>2016-02-04T19:00:00.000Z</published>
    <updated>2016-02-04T19:02:33.000Z</updated>
    <content type="html"><![CDATA[<p>HFS+ is not case sensitive. It took me 6 months to realize this basic fact. It’s one of these things you never bother researching when you consider buying a mac. Last week it hit me hard. I spent 30 minutes trying to fix something that should have been fixed in 30 seconds at most.</p>
<p>A colleague had created <code>File.ext</code> on our website hosted on github pages but printed <code>url/file.ext</code> on important documents they were supposed to hand over to someone. Without access to either Internet or a printer, they asked me to fix this. Easy as pie. Except…</p>
<pre><code>$ mkdir gittest &amp;&amp; cd gittest
$ git init
$ touch File &amp;&amp; ls
File
$ git add File &amp;&amp; git commit -m &quot;add File&quot;
$ mv File file &amp;&amp; ls
a
$ git add file &amp;&amp; git status
On branch master
nothing to commit, working directory clean
</code></pre><p>Oops. At this point, I lost quite some trying different ideas. I could not believe HFS+ was case insensitive, it never even occurred to me, I thought git was playing a trick on me. I ended up doing the following:</p>
<pre><code>$ git rm File &amp;&amp; git add file
$ git commit -m &quot;rename file&quot;
</code></pre><p>The problem being fixed, I investigated a bit.</p>
<pre><code>$ touch a A &amp;&amp; ls
a
$ echo b &gt; a
$ cat A
b
</code></pre><p>I then had to get confirmation on the Internet. Of course, most developers already knew about this. I didn’t. And I currently have more than 70 repositories in my dedicated folder <code>~/repositories</code>. Imagine if one of these had <code>file</code> and <code>File</code> in the same directory when I cloned it.</p>
<p>Here is what I finally did to prevent any future headache.</p>
<pre><code>$ du -ch repositories | grep total
14.8G   total
$ hdiutil create -type SPARSE -fs &apos;Case-sensitive Journaled HFS+&apos; -size 20g ~/volume_repos.dmg
created: ~/volume_repos.dmg.sparseimage
</code></pre><p>I then decided on a mounting point for this volume, added an alias to mount it to my rc file, created a symlink <code>~/repositories</code> -&gt; <code>~/mountpointrepo</code>, moved my repos to the volume.</p>
<pre><code>$ mv repositories backup_repositories
$ echo alias mountrepos=&quot;hdiutil attach ~/volume_repos.dmg.sparseimage -mountpoint /Users/victor/mountpointrepo&quot; &gt; .zshrc
$ source .zshrc
$ mountrepos
$ ln -s /Users/user/mountpointrepo repositories
$ cp -r backup_repositories/.* backup_repositories/* repositories
$ touch repositories/a repositories/A &amp;&amp; ls repositories/
A a
</code></pre><p>Perfect. And the sparse volume will grow without my intervention to fit my <code>~/repositories</code> content.</p>
<p>JetBrains IDEs started complaining though:</p>
<blockquote>
<p>   Filesystem Case-Sensitivity Mismatch<br>        The project seems to be located on a case-sensitive file system.<br>        This does not match the IDE setting (controlled by property “idea.case.sensitive.fs”)</p>
</blockquote>
<p>Even if their doc on this subject is very, very poor, I found the following solution:</p>
<pre><code>echo idea.case.sensitive.fs=true &gt;&gt; Library/Preferences/IntelliJIdea15/idea.properties
</code></pre><p>It feels safer now though I cannot really understand why case insensitive file systems still exist in 2016. Probably because people like me buy macs, I know.</p>]]></content>
    <summary type="html">
    <![CDATA[OSX file system, HFS+, is case insensitive.]]>
    
    </summary>
    
      <category term="osx" scheme="https://vhf.github.io/blog/tags/osx/"/>
    
      <category term="file systems" scheme="https://vhf.github.io/blog/tags/file-systems/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fixing Hiring through RSS]]></title>
    <link href="https://vhf.github.io/blog/2016/02/02/fixing-hiring-through-rss/"/>
    <id>https://vhf.github.io/blog/2016/02/02/fixing-hiring-through-rss/</id>
    <published>2016-02-02T16:17:17.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>From: Victor Felder &lt;me@example.com&gt;</code><br><code>To: &lt;you@example.com&gt;</code></p>
<h2 id="I_u2019m_not_looking_for_work_2C_thanks_for_asking_21"><a href="#I_u2019m_not_looking_for_work_2C_thanks_for_asking_21" class="headerlink" title="I’m not looking for work, thanks for asking!"></a>I’m not looking for work, thanks for asking!</h2><p>Really, I appreciate your attention. Both you and I know that sooner or later I’ll be looking for a job again. I understand you might need to hire someone right now. In this case, and if you’re not a recruiter, you could still find my email address on the web and take your chance if you really believe I would be a good fit. Otherwise, if you’re not in a hurry and if you consider I would still be worth hiring in a few months/years/decades or if you think I’d be an awesome colleague, here’s what you could do: Subscribe to <a href="https://vhf.github.io/job.xml">this RSS feed</a> to get notified as soon as I’m back on the job market.</p>
<p>Now, of course I might be stuck in an unsatisfying position and wouldn’t like my boss to be aware that I’m looking for a way out, but I don’t want to be pessimistic. I don’t have the relevant data but I’m not sure most people in my industry switch jobs without spending a few (f)unemployed weeks looking for the best option in between.</p>
<p>Should you subscribe, here is my pledge to you:</p>
<ul>
<li>I will not use this feed if I don’t need to. A publication on this feed will be a definitive signal of my intention of finding a new job. (Or a short message containing a new address for this feed if for whatever reason I need to move it.)</li>
<li>I will publish something on this RSS feed as soon as I need to.</li>
<li>It will contain a very short bio and describe what I’m looking for (in terms of position, company type/size, technology, location, part/full-time, perhaps even remuneration).</li>
<li>It will inform you of my preferred method(s) of contact (to schedule a call, ask for a full CV, etc).<br>&nbsp;</li>
</ul>
</blockquote>
<p>This blog post is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons Attribution 3.0 Unported License</a> by Victor Felder.</p>
<p><em>I’m <a href="https://twitter.com/_vhf" target="_blank" rel="external">@_vhf</a> on Twitter, please feel free to follow me. I’ll probably be blogging again about other RSS-related things because unlike a Norwegian Blue parrot, web feed are not dead<sup id="a1"><a href="#f1" title="Jump to footnote">1</a></sup>.</em></p>
<hr>
<p><b id="f1">1</b> Although (according to <a href="https://www.google.com/trends/explore#q=%2Fm%2F035c93%2C%20%2Fm%2F0n5tx&amp;cmpt=q&amp;tz=Etc%2FGMT-1" target="_blank" rel="external">Google Trends</a>) interest for web feeds in the general public has been steadily declining since December 2005, more than a third of the top 1,000,000 most visited websites are providing an XML feed according to <a href="http://trends.builtwith.com/feeds/" target="_blank" rel="external">builtwith</a>. Please get in touch if you have relevant data, e.g. if you know whether this &gt;33% statistic is in a down- or uptrend. We could even mine <a href="https://commoncrawl.org/" target="_blank" rel="external">Common Crawl</a> for XML feeds presence with subdomain granularity. Any help much appreciated. <a href="#a1" title="Jump back to footnote reference">↩</a></p>]]></content>
    <summary type="html">
    <![CDATA[What if people had feeds companies could subscribe to, to be notified when start looking for work?]]>
    
    </summary>
    
      <category term="rss" scheme="https://vhf.github.io/blog/tags/rss/"/>
    
      <category term="hiring" scheme="https://vhf.github.io/blog/tags/hiring/"/>
    
      <category term="project" scheme="https://vhf.github.io/blog/categories/project/"/>
    
      <category term="old tech new ideas" scheme="https://vhf.github.io/blog/categories/project/old-tech-new-ideas/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Enhancing GitHub with Chrome extensions]]></title>
    <link href="https://vhf.github.io/blog/2016/01/30/enhancing-github-with-chrome-extensions/"/>
    <id>https://vhf.github.io/blog/2016/01/30/enhancing-github-with-chrome-extensions/</id>
    <published>2016-01-30T17:18:18.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>If you ever maintained a popular GitHub project, you might have suffered from a couple of things:</p>
<ul>
<li>Your GitHub news feed became <a href="/blog/images/github-feed.png">useless</a> because stars, issues/PR comments, wiki edits notifications were burying the notifications you were interested in in an endless flood.</li>
<li>You spent a lot of time repeating the same things over and over on your project’s issues or PRs, such as <em>Thanks for your contribution! Please read the <a href="https://github.com/vhf/free-programming-books/blob/master/CONTRIBUTING.md#formatting" target="_blank" rel="external">Formatting section of our <code>CONTRIBUTING.md</code></a> and fix your PR accordingly.</em> (While still adding a custom comment to each contributor pointing them at what they did wrong or how they can fix it, of course.)</li>
</ul>
<p>And since we spend so much time on GitHub, why not also customizing it in some fun ways?</p>
<p>Here are four Chrome extensions for GitHub I enjoy using – and they are all compatible with each others.</p>
<h3 id="dashboard__28src_29"><a href="#dashboard__28src_29" class="headerlink" title="dashboard (src)"></a><a href="https://chrome.google.com/webstore/detail/dashboard/pcnaddhmngnnpookfhhamkelhhakimdg" target="_blank" rel="external">dashboard</a> (<a href="https://github.com/muan/dashboard" target="_blank" rel="external">src</a>)</h3><p>dashboard inserts a row of checkboxes at the top of your GitHub feed. Toggling these checkboxes show/hide specific types of notifications. For example you could use it to hide all fork notifications. Or only show new issues/PR notifications.</p>
<p>I use it to quickly navigate in my feed.</p>
<h3 id="github-feed-blacklist__28src_29"><a href="#github-feed-blacklist__28src_29" class="headerlink" title="github-feed-blacklist (src)"></a><a href="https://chrome.google.com/webstore/detail/github-feed-blacklist/dbhboodpldcdeolligbmnhnjpkkolcnl" target="_blank" rel="external">github-feed-blacklist</a> (<a href="https://github.com/vhf/github-feed-blacklist" target="_blank" rel="external">src</a>)</h3><p>dashboard is great and all but what if you only want to hide star notifications and issues/PR comments coming from a specific repository? github-feed-blacklist got your back. It adds an icon to your extensions list, clicking it provides you with a way to add (remove) repositories to the list and blacklist notifications for each repo you added by checking boxes. (Keep in mind it’s a <em>blacklist</em>: check a box to hide, not the opposite.) To keep your feed “full”, it automatically loads the next notifications until 50 notifications are displayed. It also adds a counter at the top of your feed to tell you how many notifications have been hidden - clicking this counter will temporarily show them all. The UI is kinda ugly but heh, I’m no design ninja.</p>
<p>I use it to mute specific notification types coming from specific repos.</p>
<h3 id="GitHub_Canned_Responses__28src_29"><a href="#GitHub_Canned_Responses__28src_29" class="headerlink" title="GitHub Canned Responses (src)"></a><a href="https://chrome.google.com/webstore/detail/github-canned-responses/lhehmppafakahahobaibfcomknkhoina" target="_blank" rel="external">GitHub Canned Responses</a> (<a href="https://github.com/notwaldorf/github-canned-responses" target="_blank" rel="external">src</a>)</h3><p>GitHub Canned Responses adds a button inside the issues/PR comment form. Activating it will allow you to insert a predefined answer in the comment form. The saved canned answers list can be edited to modify the existing ones, add your own or delete the ones you don’t need.</p>
<p>I intend to use it to insert repetitive answers to the PRs I got, I’m sure it will prove particularly useful to avoid having to explain the same stuff over and over again, for example to tell people that a failed Travis run on a PR means they should go check Travis’ logs and actually fix their commits or ask for help.</p>
<h3 id="Isometric_Contributions__28src_29"><a href="#Isometric_Contributions__28src_29" class="headerlink" title="Isometric Contributions (src)"></a><a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" target="_blank" rel="external">Isometric Contributions</a> (<a href="https://github.com/jasonlong/isometric-contributions" target="_blank" rel="external">src</a>)</h3><p>Isometric Contributions is the fun one. It does not serve a particularly useful purpose. All it does is rendering a GitHub user contribution graph (the small squares you keep abusing to draw cat emojis or propose to your SO, you know) as isometric pixel art. And it’s beautiful.</p>
<p>Please tweet me <a href="https://twitter.com/_vhf" target="_blank" rel="external"><code>@_vhf</code></a> if you think I forgot your favorite GitHub Chrome extension!</p>]]></content>
    <summary type="html">
    <![CDATA[GitHub lacks a few features which might be useful for popular projects maintainers. Here are some helpful Chrome extensions.]]>
    
    </summary>
    
      <category term="chrome" scheme="https://vhf.github.io/blog/tags/chrome/"/>
    
      <category term="github" scheme="https://vhf.github.io/blog/tags/github/"/>
    
      <category term="project" scheme="https://vhf.github.io/blog/categories/project/"/>
    
      <category term="tools" scheme="https://vhf.github.io/blog/categories/project/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chromium, Chrome, Node.js, V8, Crankshaft and bailout reasons]]></title>
    <link href="https://vhf.github.io/blog/2016/01/22/chromium-chrome-v8-crankshaft-bailout-reasons/"/>
    <id>https://vhf.github.io/blog/2016/01/22/chromium-chrome-v8-crankshaft-bailout-reasons/</id>
    <published>2016-01-22T19:20:20.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>This post is a short summary about all these terms, with a rough description of how V8 works. (It’s rather an overview of how Crankshaft works, really.)</p>
<h2 id="Chromium_2C_Chrome_2C_Node-js"><a href="#Chromium_2C_Chrome_2C_Node-js" class="headerlink" title="Chromium, Chrome, Node.js"></a>Chromium, Chrome, Node.js</h2><p>The Chromium Project is responsible for Chromium’s development. Chromium, released in 2008, is the open-source web browser on which Google Chrome is based. Chromium’s JavaScript engine is V8. Other projects such as the Opera web browser and the Node.js runtime use V8 as their JavaScript engine.</p>
<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p>V8 compiles JavaScript to native machine code and executes it right away. In 2010, the Chromium Project released a new version of V8 including a new compiling infrastructure named Crankshaft (<a href="https://en.wikipedia.org/wiki/Chromium_(web_browser)" target="_blank" rel="external">#1</a>, <a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)" target="_blank" rel="external">#2</a>).</p>
<h2 id="Crankshaft_and_bailouts"><a href="#Crankshaft_and_bailouts" class="headerlink" title="Crankshaft and bailouts"></a>Crankshaft and bailouts</h2><p>The three most important components of Crankshaft are:</p>
<ol>
<li>the base compiler, which compiles JavaScript to machine code as fast as possible without even trying to optimize most of the things,</li>
<li>the runtime profiler, which tracks how much time is spent running which parts of code and identifies <em>hot code</em>, i.e. code worth spending time optimizing, and</li>
<li>the optimizing compiler, which attempts to optimize the previously identified hot code.</li>
</ol>
<p>Optimizing the JavaScript is always a tradeoff. We want both fast loading pages and fast running code, i.e. low start-up time and peak performance. Low start-up time is achieved by the base compiler: V8 compiles and runs the code as soon as it gets it. Peak performance is achieved by the optimizing compiler: Crankshaft optimizes the hot code. Optimizing before first running the code is not a good idea because optimizing takes time which would slow down start-up time. Also, running the unoptimized code allows Crankshaft to gather useful data about <em>how</em> to optimize it.</p>
<p>When the optimizing compiler gets to work, it makes optimistic assumptions about the code it’s optimizing, meaning that it assumes it’s optimizable and does its best.</p>
<p>In some cases, the runtime data (e.g. type information) provided by the base compiler to the optimizing compiler didn’t cover some (edge) cases and the optimizing compiler sends V8 back to run the base compiler compiled code. This is known as a <em>deopt</em>. Later on, the same hot code will be fed to the optimizing compiler again with more runtime data, and could eventually succeed its optimization attemps. If it fails more than 10 times, it will give up with the following bailout reason: “<a href="https://github.com/vhf/v8-bailout-reasons#optimized-too-many-times" target="_blank" rel="external">Optimized too many times</a>“</p>
<p>In some other cases, the optimizing compiler receives code that contains JavaScript features (such as <code>try...catch</code> statements) it doesn’t support, or the code doesn’t respect <a href="/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/">some limits</a> set by the optimizing compiler. In this case, the optimizing compiler will also fall back to the base compiler compiled code. This is known as a <em>bailout</em> (because the optimizing compiler bails out on his optimization attempt), and whenever it happens Crankshaft is kind enough to give us a reason why the bailout happened.</p>
<p>This repo lists all these bailout reasons: <a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a>. The aim of this project is to provide insights by reproducing most of them, explaining why they happened and how to avoid them.</p>
<p>A function which gets optimized can run 100x faster, meaning that it’s kind of wise to learn about these bailout patterns to best avoid them if you care about the JavaScript performances of the code you run on V8 (for instance if you target Chromium/Chrome, Node.js or Opera).</p>
<p>I’ll most probably write a follow up about TurboFan -the new V8 JavaScript optimizing compiler- and what it brings to the table.</p>
<p><em>References on this subject: <a href="http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html" target="_blank" rel="external">#3</a>, <a href="https://github.com/GoogleChrome/devtools-docs/issues/53" target="_blank" rel="external">#4</a>, <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="external">#5</a>, <a href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/" target="_blank" rel="external">#6</a></em></p>]]></content>
    <summary type="html">
    <![CDATA[A short summary about these terms, an overview of how V8 / Crankshaft works.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome 49 is coming, with 92% ES2015 coverage!]]></title>
    <link href="https://vhf.github.io/blog/2016/01/21/Chrome-49-is-coming-with-92-ES2015-coverage/"/>
    <id>https://vhf.github.io/blog/2016/01/21/Chrome-49-is-coming-with-92-ES2015-coverage/</id>
    <published>2016-01-21T20:53:35.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>December 11, Chrome 49 landed on the Dev channel. This week, with already <a href="https://googlechromereleases.blogspot.com" target="_blank" rel="external">two new releases of Chrome 49</a> to the Dev channel, the process seems to intensify.</p>
<p>On Tuesday <a href="http://seththompson.org" target="_blank" rel="external">Seth Thompson</a>, who works on V8, <a href="https://news.ycombinator.com/item?id=10932790" target="_blank" rel="external">wrote on HN</a> that “V8 now has 92% ES6 coverage in Chrome Canary (on track for shipping in Chrome M49)!”</p>
<p>kangax’ awesome <a href="http://kangax.github.io/compat-table/es6/#chrome49" target="_blank" rel="external">ECMAScript compatibility table</a> is already up to date, and Chrome 49’s column looks very green indeed.</p>
<p>Since I talked about both optimizing <strong>rest parameters</strong> in Babel (<a href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">#1</a>, <a href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/">#2</a>) and <strong><a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a></strong> (<a href="https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/">#3</a>, <a href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">#1</a>, <a href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/">#2</a>) on this blog, I thought I would look into it again.</p>
<p>The upcoming version of V8 does support rest parameters, and that’s awesome! But Crankshaft bails out when it encounters one of them (<a href="https://chromium.googlesource.com/v8/v8/+/d3f074b23195a2426d14298dca30c4cf9183f203%5E%21/src/bailout-reason.h" target="_blank" rel="external">#4</a>) instead of optimizing your function, and that’s less awesome. But the engineer who introduced this bailout said (<a href="https://codereview.chromium.org/1272673003" target="_blank" rel="external">#5</a>) they will be optimized by TurboFan instead, awesome again! (He even hinted that all currently “unsafe” usages of the <code>arguments</code> object will be optimized, and that’s <em>very awesome</em>!)</p>
<p>In the meantime, before all of these ES2015 features land in Node, before TurboFan comes in handy, I guess I’ll keep using Babel’s <code>transform-es2015-parameters</code> for my Node code.</p>]]></content>
    <summary type="html">
    <![CDATA[It's coming, it's awesome, but some features might still be worth transpiling.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Modifying or Deleting a Line from an Old Commit]]></title>
    <link href="https://vhf.github.io/blog/2016/01/20/modifying-or-deleting-a-line-from-an-old-commit/"/>
    <id>https://vhf.github.io/blog/2016/01/20/modifying-or-deleting-a-line-from-an-old-commit/</id>
    <published>2016-01-20T22:59:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>I’ll spare you and assume you know what you’re doing, so here’s the short version. Keep reading for a more comprehensive one.</p>
<ol>
<li>Find the commit you want to change or delete</li>
<li>Get the SHA of its parent commit.</li>
<li><code>git rebase -i 1a2b3c4d</code> (1a2b3c4d is the parent)</li>
<li>Replace <code>pick</code> with <code>edit</code></li>
<li><code>git add yourfile</code></li>
<li><code>git commit --amend</code></li>
<li><code>git rebase --continue</code></li>
</ol>
<p>I work alone on most of my side projects. They are experiments, personal documentations, <del>stupid</del> ideas… they have something in common though, they are versioned using git and I’m often their only contributor. Which means that if I want to rewrite the history and <code>git push --force</code>, I can! It won’t break someone else’s work!</p>
<p>Maybe I shouldn’t have stricken out <em>stupid</em> here. Two months ago I had an idea. It came out of nowhere and was very easy to do, so I did it. <em>Let’s log the content of my clipboard every minute!</em></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">cd</span> ~/repositories/clipboard/ &amp;&amp; pbpaste &gt; clipboard.txt &amp;&amp; git aa &amp;&amp; git commit -m <span class="string">"`date`"</span> 2&gt;&amp;1 &gt;/dev/null</span><br></pre></td></tr></table></figure>
<p>This idea being stupid and/or useless does not mean I <em>am</em> stupid or useless, I was obviously not going to push this to a remote server.</p>
<p>But let’s pretend I’d like to anyway. We can very safely assume that doing so would be very unsafe: there are probably a bunch of my passwords in the repo (copy-pasted from my password manager), and private emails (written in my text editor and copy-pasted to my webmail), and kilobytes of source code I wrote at work, etc.</p>
<p>Obviously, trying to delete all potential private data from my clipboard repo would be a hard and painful process of carefully reviewing the content of each of the thousands of commits it contains.</p>
<p>So for the sake of the demonstration, and because I used this post as an excuse to tell you about the futility of logging your clipboard, or because I used the futility of logging my clipboard to blog about how to change / delete an old commit, here’s how you could achieve the removal of <code>mysecret</code> from your git repo without leaving any trace (given that nobody cloned or forked your repo):</p>
<ol>
<li>Find the commit you want to change or delete:<ul>
<li>If you already know the commit SHA, easy.</li>
<li>If you know the commit message, <code>git log --grep=&#39;Versioning my secret&#39; # --all for all branches</code></li>
<li>If you know the commit content, <code>git grep mysecret $(git rev-list --all)</code></li>
<li>If you know which file contains your secret, <code>git blame file</code>, find line, get SHA, checkout SHA, blame, repeat until you get the first commit introducing the secret (don’t settle for the 20 following commits fiddling with this line’s whitespaces).</li>
<li>Choose whatever option gets you the SHA the quickest. The order listed here is not that bad in my opinion. So, your secret first appeared in your git repository at commit <code>054f345865f8f5a319dc05fcfa6cf9b76541e229</code></li>
</ul>
</li>
<li>You actually need the SHA of the previous commit (parent commit). The commit that came directly before the one you want to modify or get rid of.<ul>
<li><code>git rev-list --all | grep 054f345865f8f5a319dc05fcfa6cf9b76541e229 -A1 | tail -n1</code></li>
<li>So, the parent is <code>e20645764ce6419e348e6c1b5dea2348e18d050f</code></li>
</ul>
</li>
<li>We will use the parent as rebase starting point, meaning our bad commit will be the first one in the rebase process.<ul>
<li><code>git rebase -i e20645764ce6419e348e6c1b5dea2348e18d050f</code></li>
</ul>
</li>
<li>The first line should be your “bad” commit: <code>pick 054f345 versioning secret stuff!</code><ul>
<li>Replace <code>pick</code> with <code>edit</code>.</li>
<li>Close the editor to start rebasing.</li>
</ul>
</li>
<li>Your repo is now at the bad commit. Edit <code>yourfile</code> and remove your secret from it. Or delete <code>yourfile</code>.</li>
<li><code>git add yourfile</code></li>
<li><code>git commit --amend</code></li>
<li><code>git rebase --continue</code></li>
<li>Done!</li>
</ol>
<p>Note that if you simply want to <em>delete the bad commit</em> instead of <em>editing it to remove a secret from a file or remove a file from the commit</em>, this won’t work. Simply drop the commit when rebasing instead of <code>edit</code>ing it.</p>
<p>The first time I had to do that it took me quite some time to figure it out, and search engines weren’t that helpful.</p>
<p>If you have a complex history and would like to edit a bad merge or other weird cases AND if you like <em>choose your own adventure</em> books, take a look at this: <a href="http://sethrobertson.github.io/GitFixUm/fixup.html" target="_blank" rel="external">http://sethrobertson.github.io/GitFixUm/fixup.html</a>. It’s as awesome as it’s hard to navigate! :)</p>
<p>PS: I’m not responsible if you rewrite the history of a publicly traded github repository.<br>PPS: I’m now the very proud owner of a very useless domain name: <a href="http://☑.ml" target="_blank" rel="external">☑.ml</a>. (You can even append <code>/blog/</code> to get here. UTF-8 works!) Finally a URL I could handwrite without worrying about my handwriting (while worrying about the poor people who will try to type it in their browser instead)!</p>]]></content>
    <summary type="html">
    <![CDATA[Here's how. But seriously, you probably shouldn't do it.]]>
    
    </summary>
    
      <category term="git" scheme="https://vhf.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[One Simple Trick for JavaScript Performance Optimization]]></title>
    <link href="https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/"/>
    <id>https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/</id>
    <published>2016-01-15T00:20:12.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>Sorry for the clickbait. It’s so omnipresent these days, I <em>had</em> to try it. 90% of my daily Medium digest and 90% of my Pocket recommendations are like this. Note to self: write some kind of clickbait filtering software. Obtaining a huge training set should <strong>not</strong> be an issue. (We could even crowdsource these! How fun!)</p>
<p>Anyway. If you follow my blog (and I’m not sure you should), you might have guessed that I’m currently having fun with V8’s optimizing compiler, an awesome piece of software romantically called Crankshaft. Basically, it’s what makes JavaScript fast on Chrome/nodejs.</p>
<p>Most of the time Crankshaft is able to optimize JavaScript functions. They then run really fast.</p>
<p>In some cases, Crankshaft doesn’t optimize a function. It simply gets to a function and bails out instead of trying to optimize it. Whenever this happens, it invokes a <strong>bailout reason</strong>.</p>
<p>Documentation on these bailout reasons are very scarce, so Wednesday I decided to list them all and try to reproduce each of them, documenting why it occurs, giving advice on how to avoid the bailout, and give real-life examples of where it can be spotted.</p>
<p>As of the writing of this post, I was only able to partially document 8 of them. I have more material but need more research/more time.</p>
<p>If you’d like to see what I got and to contribute your awesome V8 knowledge, please see <strong><a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a></strong> on GitHub.</p>
<p>But I didn’t make you read all this for nothing. In the title of this post I made a promise I intend to fulfill, so here is…</p>
<h3 id="One_Simple_Trick_for_JavaScript_Performance_Optimization"><a href="#One_Simple_Trick_for_JavaScript_Performance_Optimization" class="headerlink" title="One Simple Trick for JavaScript Performance Optimization"></a>One Simple Trick for JavaScript Performance Optimization</h3><p>Don’t use more than <del>65535</del> 512 parameters in a single JavaScript function. Otherwise, Crankshaft will bail out with the following informative message: “Too many parameters.”</p>
<h4 id="How_can_I_fix_my_JavaScript_code_to_make_it_run_blazingly_fast_3F"><a href="#How_can_I_fix_my_JavaScript_code_to_make_it_run_blazingly_fast_3F" class="headerlink" title="How can I fix my JavaScript code to make it run blazingly fast?"></a>How can I fix my JavaScript code to make it run blazingly fast?</h4><p>Stick to 511 parameters (or less).</p>
<ul>
<li>511 is a good-looking number. In unicode, it looks really really good: &#511;</li>
<li>A function with 511 parameters always looks better than a function with 512 parameters. (I have discovered a truly remarkable proof which this margin is too small to contain.)</li>
</ul>
<p><em>Note: I originally wrote this article with 65535 instead of 512. I did not pay enough attention while reading V8 source code. It was 65535 bits, i.e. 512 bytes, or 512 parameters. Not 65535 parameters. <a href="https://github.com/vhf/concise-notes/commit/88fc535cbe23a567ddd3e65f8f64c6590936a51b" target="_blank" rel="external">Review the diff</a>.</em></p>]]></content>
    <summary type="html">
    <![CDATA[My attempt at clickbait. Also, an interesting (who said "useless") JS performance tip.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Comment Syntax in Programming Languages (and the Eye of Osiris)]]></title>
    <link href="https://vhf.github.io/blog/2016/01/13/comment-syntax-in-programming-languages/"/>
    <id>https://vhf.github.io/blog/2016/01/13/comment-syntax-in-programming-languages/</id>
    <published>2016-01-13T18:19:19.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>I witnessed an uncommon debate the other day. Someone was asking why programming languages don’t agree on a common syntax for comments.</p>
<p>Besides the usual indifferent answers such as “why would they”, “why should they”, and “it doesn’t matter in the least”, a couple of points where made:</p>
<ol>
<li>When designing a programming language, discussing the comment syntax is the ultimate form of <a href="https://en.wikipedia.org/wiki/Bikeshedding" target="_blank" rel="external">bikeshedding</a>.</li>
<li>An interesting corollary of <em>Parkinson’s law of triviality</em> is <a href="https://wiki.haskell.org/Wadler&#39;s_Law" target="_blank" rel="external">Wadler’s law of language design</a>, stating that when designing a programming language “twice as much time is spent discussing syntax than semantics, twice as much time is spent discussing lexical syntax than syntax, and twice as much time is spent discussing syntax of comments than lexical syntax.”</li>
</ol>
<p>In conclusion, why not just rip off <a href="https://vimeo.com/111122950" target="_blank" rel="external">Sketchy JS</a>‘ “Eye of Osiris” operator syntax introduced by James Mickens?</p>
<p class="pre-fake">{[~æ<br>this is a comment<br>*$€<img src="/blog/images/beyonce.jpg" alt="Beyonce" style="margin: none !important; display: inline-block; height: 37px; width: 39px; vertical-align: text-top"></p>

<p>(A curly brace, a square brace, a squiggle, and the combined AE character. Place your comment after the first part of the Eye of Osiris and close the Eye of Osiris using an asterisk, a dollar sign, a euro sign, and a tiny picture of Beyonce.)</p>]]></content>
    <summary type="html">
    <![CDATA[Wadler's law is bikeshedding applied to programming languages design.]]>
    
    </summary>
    
      <category term="programming language design" scheme="https://vhf.github.io/blog/tags/programming-language-design/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Making Babel fast with ES2015 rest parameters]]></title>
    <link href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/"/>
    <id>https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/</id>
    <published>2015-12-17T12:36:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>This post is a follow-up of <a href="http://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">JavaScript performance with Babel and Node.js: a case against default parameters in tail call optimizations</a>. At the time, Babel 6 had only been published for a few hours.</p>
<p>When Babel 6 was released, I quickly realised that I kind of missed my target: tail call optimisation had been dropped in the process. But all was not lost, I could still investigate Babel’s use of <code>arguments</code>.</p>
<h1 id="Fixture_tests"><a href="#Fixture_tests" class="headerlink" title="Fixture tests"></a>Fixture tests</h1><p>First, I looked at a lot of fixture tests. These are files meant to test if a particular Babel transform or plug-in works properly. They consist of two files: <code>actual.js</code> (ES2015 code) and <code>expected.js</code>. The goal of this test is to check if the output of <code>babel actual.js</code> matches the content of <code>expected.js</code>.</p>
<p>I noticed something about a particular transform : <code>babel-plugin-transform-es2015-parameters</code>, more precisely about its handling of <code>rest</code> parameters:</p>
<figure class="highlight js"><figcaption><span>actual.js</span><a href="https://github.com/babel/babel/blob/82ddbc0ecd9a16fdb173bbcf85bc10ade6f9828d/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/actual.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = (...arrs) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> x = arrs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = arrs[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/82ddbc0ecd9a16fdb173bbcf85bc10ade6f9828d/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>This is unsafe. V8 will only be able to optimise the <code>concat</code> function if the <code>arguments</code> object has a length greater than 1. Otherwise, for example <code>concat([0])</code>, the attempt to access the undefined <code>arguments[1]</code> will force V8 to rematerialize <code>arguments</code> on the fly, preventing the whole function from being optimised.</p>
<h1 id="First_attempt"><a href="#First_attempt" class="headerlink" title="First attempt"></a>First attempt</h1><p>Having no idea about Babel’s codebase and internals, it took me a whole weekend to come up with a first patch: <a href="https://github.com/babel/babel/pull/2833" target="_blank" rel="external">#2833: Have es2015 rest transform safely use <code>arguments</code></a>. It fixed some of the rest-transformed unsafe use of <code>arguments</code> and it got merged after five weeks (which is way too long by the way, but I don’t blame anyone, I’m pretty sure it was an exceptional situation where someone said they would take care of this PR, then got busy, and in the meantime nobody saw the need to take over because someone was already in charge. No big deal).</p>
<p>At first I was pretty happy with this patch. The new <code>expected.js</code> looked like this:</p>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/9a97d92217dffcf6478611067c1525fa4004fce4/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>.length &lt;= <span class="number">0</span> || <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>.length &lt;= <span class="number">1</span> || <span class="built_in">arguments</span>[<span class="number">1</span>] === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>which was safe. Some basic benchmarks were showing a 4x speedup. The tests were green. I had learned a lot about how Babel works.</p>
<p>Until <a href="https://github.com/babel/babel/pull/2833#discussion_r47472444" target="_blank" rel="external">someone noticed the pattern I was using was a bit weird</a>. In fact, the reason I initially chose this pattern was that I got it from <a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-es2015-parameters/src/default.js#L8-L11" target="_blank" rel="external">here</a>. While it makes sense to use it for default parameters handling (<code>ARGUMENTS.length &lt;= INDEX || ARGUMENTS[INDEX] === undefined ? DEFAULT_VALUE : ARGUMENTS[INDEX];</code>), it becomes overly complicated in the case where <code>DEFAULT_VALUE</code> is <code>undefined</code>.</p>
<h1 id="Second_attempt"><a href="#Second_attempt" class="headerlink" title="Second attempt"></a>Second attempt</h1><p>I was fixing this pattern issue, replacing it with <code>ARGUMENTS.length &lt;= INDEX ? undefined : ARGUMENTS[INDEX]</code>, when I noticed my previous patch was incomplete.</p>
<figure class="highlight js"><figcaption><span>actual.js</span><a href="https://github.com/babel/babel/blob/15969a09046a50ae2ae0503725b7fb00cdd7137f/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-multiple/actual.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span> (<span class="params">f, ...items</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    x = items[<span class="number">0</span>];</span><br><span class="line">    x = items[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>was still being converted to:</p>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/15969a09046a50ae2ae0503725b7fb00cdd7137f/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-multiple/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    x = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    x = <span class="built_in">arguments</span>[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The transform was not taking into account the presence of a rest parameter when there were other parameters involved (<code>function (f, ...items)</code>). After I fixed this issue, I had another one: <code>x = items[1]</code> was correctly transformed, but not <code>x[1] = ...</code>, <code>x.p = ...</code> or <code>... = items[1] || something</code>. I had to generalise the patch to (safely) cover all possible occurrences of accessing a value from a rest argument.</p>
<p>I added a fixture test, reworked my patch and opened a new PR: <a href="https://github.com/babel/babel/pull/3165" target="_blank" rel="external">Fixing T6818</a>.</p>
<figure class="highlight js"><figcaption><span>actual.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">f, g, ...items</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    <span class="keyword">var</span> y = g;</span><br><span class="line">    x[<span class="number">12</span>] = items[<span class="number">0</span>];</span><br><span class="line">    y.prop = items[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> z = items[<span class="number">2</span>] | <span class="number">0</span> || <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>expected.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    <span class="keyword">var</span> y = g;</span><br><span class="line">    x[<span class="number">12</span>] = <span class="built_in">arguments</span>.length &lt;= <span class="number">2</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">2</span>];</span><br><span class="line">    y.prop = <span class="built_in">arguments</span>.length &lt;= <span class="number">3</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> z = (<span class="built_in">arguments</span>.length &lt;= <span class="number">4</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">4</span>]) | <span class="number">0</span> || <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hopefully, this part is done. I’ll try to find some other Crankshaft-related-JS-anti-patterns in what Babel generates.</p>]]></content>
    <summary type="html">
    <![CDATA[What I did to help avoid bailouts on rest parameters transpilation.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="babel" scheme="https://vhf.github.io/blog/tags/babel/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript performance with Babel and Node.js: a case against default parameters in tail call optimizations]]></title>
    <link href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/"/>
    <id>https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/</id>
    <published>2015-11-02T12:36:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>Disclaimer:</p>
<ul>
<li>Babel 5.8.29 (babel-core 5.8.33)</li>
<li>Node.js v5.0.0</li>
<li>I know these factorial examples are very artificial, please bear with me, I’ll explain how I came to look at those things at the end of this post</li>
<li>The title of this post might be incorrect (or too specific), I’ll also talk about it later</li>
<li>Optimization is not an obsession of mine. Having fun with JavaScript is.</li>
</ul>
<p>Here are three recursive implementations of the factorial function:</p>
<figure class="highlight js"><figcaption><span>tail-call.js</span><a href="https://gist.github.com/vhf/25eebd0aa0ca5b3c1aec#file-tail-call-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "naive"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * factorial1(x<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail rec using a default parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec2(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec2</span>(<span class="params">x, acc = 1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> facRec2(x<span class="number">-1</span>, x*acc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail rec</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec3(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec3</span>(<span class="params">x, acc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> facRec3(x<span class="number">-1</span>, x*acc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Which one do you think will perform better when transpiled into ES5, transformed by Babel’s tail call optimization (TCO for short), and run on Node.js (therefore V8)?</p>
<p>It would be reasonable to expect:</p>
<ul>
<li>#1 to be the slowest because there’s no tail call (therefore TCO does not happen)</li>
<li>#2 and #3 to perform better than #1 (because TCO)</li>
<li>#2 and #3 to be more or less equivalent in terms of performances</li>
</ul>
<p>Let’s <a href="https://github.com/bestiejs/benchmark.js" target="_blank" rel="external">benchmark</a> it (<a href="https://gist.github.com/vhf/ecd9dba814a4edd80680" target="_blank" rel="external">suite</a>): <code>babel tail-call.js &gt; tail-call-babel.js; node tail-call-babel.js</code></p>
<pre><code>#1 no tail call          x 1,562,075 ops/sec ±0.59% (98 runs sampled)
#2 TCO/default params    x   259,399 ops/sec ±0.92% (91 runs sampled)
#3 TCO/no default params x 7,046,389 ops/sec ±0.45% (101 runs sampled)
Fastest is #3 TCO/no default params
</code></pre><ul>
<li>#3 is 27x (!) better than #2</li>
<li>Even #1 significantly outperforms #2</li>
</ul>
<p>So my quest began. What could be so wrong about #2?</p>
<p>The obvious thing to do at this point was to look at Babel’s output:</p>
<figure class="highlight js"><figcaption><span>tail-call-babel.js</span><a href="https://gist.github.com/vhf/d9e9750ae25e9dee6190#file-tail-call-babel-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// #1 "naive"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * factorial1(x - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2 tail rec using a default parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec2(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec2</span>(<span class="params">_x2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">var</span> _again = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _function: <span class="keyword">while</span> (_again) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = _x2;</span><br><span class="line">    _again = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> acc = _arguments.length &lt;= <span class="number">1</span> || _arguments[<span class="number">1</span>] === <span class="literal">undefined</span> ? <span class="number">1</span> : _arguments[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _arguments = [_x2 = x - <span class="number">1</span>, x * acc];</span><br><span class="line">      _again = <span class="literal">true</span>;</span><br><span class="line">      acc = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">continue</span> _function;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3 tail rec</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec3(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec3</span>(<span class="params">_x3, _x4</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _again2 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _function2: <span class="keyword">while</span> (_again2) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = _x3,</span><br><span class="line">        acc = _x4;</span><br><span class="line">    _again2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _x3 = x - <span class="number">1</span>;</span><br><span class="line">      _x4 = x * acc;</span><br><span class="line">      _again2 = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span> _function2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>My first reflex was to check if TCO happened. Yes, and it did a fine job at transforming both tail recursive functions <code>facRec2</code> and <code>facRec3</code> into iterative functions. (If <code>factorial2</code> uses an iterative <code>facRec2</code>, why would <code>factorial1</code> and its still-recursive implementation perform better? It’s nice to know that <code>factorial2</code> won’t bark <code>RangeError: Maximum call stack size exceeded</code> at me, but at what cost?)</p>
<p>The next obvious thing to do was to consider the only single little difference between <code>facRec2</code> and <code>facRec3</code> in the original code: the use of an ES6 default parameter. A quick glance at Babel’s output made the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="external"><code>arguments</code></a> stand out.</p>
<p>I remembered reading about <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="external">V8 “optimization killers”</a>, particularly a bit about <code>arguments</code>. Let me summarize the third section in the form of a checklist with regards to how the transformed <code>facRec2</code> makes use of parameters and <code>arguments</code>:</p>
<ul>
<li>[ ] Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</li>
<li>[x] Don’t leak <code>arguments</code></li>
<li>[x] Don’t assign to <code>arguments</code></li>
<li>[x] Don’t use <code>arguments</code> directly without <code>.length</code> or <code>[]</code></li>
<li>[x] Don’t <code>arguments[i]</code> with <code>i</code> not an integer or <code>i &gt; arguments.length-1</code></li>
<li>[x] Don’t do anything else than <code>fn.apply(y, arguments)</code></li>
</ul>
<p>Notice how <code>facRec2</code> does <code>_x2 = x - 1</code> although <code>_x2</code> is a defined parameter <em>and</em> <code>arguments</code> is mentioned in the function body? It contradicts the first rule.</p>
<p>I turned to V8. Here again, the awesome bluebird wiki page was very helpful: its first section, <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#1-tooling" target="_blank" rel="external">tooling</a>, had been my reference for some time.</p>
<p>I added:</p>
<figure class="highlight js"><figcaption><span>tail-call-babel-v8.js</span><a href="https://gist.github.com/vhf/01c095e09accf72108a1#file-tail-call-babel-v8-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStatus</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = fn.name;</span><br><span class="line">  <span class="keyword">switch</span>(%GetOptimizationStatus(fn)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">console</span>.log(name, <span class="string">' is optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">console</span>.log(name, <span class="string">' is not optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">console</span>.log(name, <span class="string">' is always optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">console</span>.log(name, <span class="string">' is never optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">console</span>.log(name, <span class="string">' is maybe deoptimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(factorial1);</span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">printStatus(factorial1);</span><br><span class="line"></span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>); <span class="comment">// I should add that facRec2(100) leads to the same perf issue</span></span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(facRec2);</span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">printStatus(facRec2);</span><br><span class="line"></span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(facRec3);</span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">printStatus(facRec3);</span><br></pre></td></tr></table></figure>
<p>at the end of <code>tail-call-babel.js</code> and ran the following:</p>
<pre><code>node --allow-natives-syntax tail-call-babel.js
  factorial1 is optimized
  facRec2 is not optimized
  facRec3 is optimized
</code></pre><p>It was clear that V8 — more precisely <a href="http://jayconrod.com/posts/54/a-tour-of-v8-crankshaft-the-optimizing-compiler" target="_blank" rel="external">Crankshaft</a> — was bailing out on <code>facRec2</code>.</p>
<p>I simply had to refactor <code>facRec2</code> to make it stop reassigning to <code>_x2</code>, right? Nope, <code>facRec2</code> still could not be optimized. Here’s a <a href="https://gist.github.com/vhf/5560a6502d5147a766f6" target="_blank" rel="external">gist</a>.</p>
<p>Going back to the checklist, I noticed that <code>facRec2</code> actually assigns to the <code>_arguments</code> object, which is a reference to <code>arguments</code>, which also contradicts something from the above checklist: Don’t assign to <code>arguments</code>.</p>
<p>Going back to the <code>facRec2</code> generated code, I copied it to create <code>facRec2b</code>, replacing <code>var _arguments = arguments;</code> with <code>var $_len = arguments.length; var _arguments = new Array($_len); for(var $_i = 0; $_i &lt; $_len; ++$_i) {_arguments[$_i] = arguments[$_i];}</code> (<a href="https://gist.github.com/vhf/58769c1d0462094a66a3" target="_blank" rel="external">full gist</a>). And V8 was happy: <code>facRec2b is optimized</code>.</p>
<p>New benchmark:</p>
<pre><code>#1 no tail call               x 1,562,300 ops/sec ±0.44% (98 runs sampled)
#2 TCO/default params + leak  x   256,521 ops/sec ±0.96% (95 runs sampled)
#2 TCO/default params no leak x   812,920 ops/sec ±0.83% (94 runs sampled)
#3 TCO/no default params      x 7,060,279 ops/sec ±0.49% (94 runs sampled)
</code></pre><p>When optimized by V8, <code>facRec2b</code> runs already 3x faster than its <code>facRec2</code> counterpart, but still ~2x slower than <code>factorial1</code>, and their performances cannot be matched with <code>facRec3</code>.</p>
<p>Here were my initial conclusions:</p>
<ul>
<li>assigning to <code>_arguments</code>, which references <code>arguments</code>, is what prevents V8 from optimizing <code>facRec2</code></li>
<li>safely converting <code>arguments</code> to an array fixes this issue</li>
<li>even with this fix, <code>facRec2b</code> is still so slow that we should simply decide not to use default parameters in any function susceptible to be TCOed by Babel</li>
<li>is there a better way to get V8 to optimize <code>facRec2</code>?</li>
<li>what’s up with this <em>Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</em> rule? I thought <a href="https://gist.github.com/vhf/a884c556a70bdcf21fbc" target="_blank" rel="external">this</a> would trigger an <em>Assignment to parameter in arguments object</em> but I could not make it happen. Answer at the end of this post.</li>
</ul>
<p>Was there more to it?</p>
<p>I took a closer look:</p>
<pre><code>node --trace-opt --trace_deopt --allow-natives-syntax tail-call-babel.js | grep facRec2 | grep -v facRec2b
  [compiling method 0x11469d0922c1 &lt;JS Function facRec2 (SharedFunctionInfo 0x24a5614171a9)&gt; using Crankshaft]
  [aborted optimizing 0x11469d0922c1 &lt;JS Function facRec2 (SharedFunctionInfo 0x24a5614171a9)&gt; because: Unsupported phi use of arguments]
  [disabled optimization for 0x24a5614171a9 &lt;SharedFunctionInfo facRec2&gt;, reason: Unsupported phi use of arguments]
</code></pre><p>Unsupported phi use of arguments. At this point I should probably say that I don’t know much about V8 internals or source code. However, I was still determined to know what was wrong with <code>facRec2</code>, so I tried looking for this cryptic <code>Unsupported phi use of arguments</code> thing on Google (after all, they are the most qualified for this particular request).</p>
<p>It’s not every day that one of my search engine requests only returns 11 results. The most interesting one is probably <a href="https://codereview.chromium.org/7553006" target="_blank" rel="external">the very commit that introduced this bailout reason</a>. I took a quick glance at <code>HGraph::CheckPhis</code>: something about blocks?</p>
<p>I thought I would learn more trying to write a minimal program reproducing this bailout reason. But that was not an easy task. What I ended up with are these three functions:</p>
<figure class="highlight js"><figcaption><span>unsupported-phi-use-of-arguments.js</span><a href="https://gist.github.com/vhf/5f88c10e2a0680a4fb19#file-unsupported-phi-use-of-arguments-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> === <span class="number">0</span>) &#123; <span class="comment">// anything evaluating to true, except a number or `true`</span></span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">var</span> again = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span> (again) &#123;</span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">    again = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HGraph::CheckPhis</code> started to make sense: reassigning <code>arguments</code> inside a “block” triggers <em>Unsupported phi use of arguments</em>. But assigning <em>to</em> <code>arguments</code> does not: it triggers a <em>Bad value context for arguments value</em>, which is already covered on <a href="http://bahmutov.calepin.co/detecting-function-optimizations-in-v8.html" target="_blank" rel="external">blogs</a> and <a href="http://stackoverflow.com/questions/29198195/whats-the-deal-with-optimising-arguments" target="_blank" rel="external">StackOverflow</a>.</p>
<h3 id="So_2C_what_u2019s_your_point_3F_Conclusion"><a href="#So_2C_what_u2019s_your_point_3F_Conclusion" class="headerlink" title="So, what’s your point? Conclusion."></a>So, what’s your point? Conclusion.</h3><p>I just wanted to practice my storytelling. And also, I wanted to raise this question: what can we do about this whole default-parameter-TCO-V8-thing? I’m not sure, so here are a few questions I would like to ask you:</p>
<ul>
<li>Should we just avoid using default parameters in any function susceptible to be TCOed by Babel? (in this example, x27 on V8)</li>
<li>or make Babel safely create an array from <code>arguments</code> in such cases? (x3)</li>
<li>or at least mention this thing in Babel’s doc as soon as Babel 6 unblacklists <code>es6.tailCall</code>? (If this ever happens? If you have informations about this blacklisting, I’d love to know!)</li>
</ul>
<p><strong>I’d love to get your opinion on these questions!</strong></p>
<p>In a very interesting <a href="https://devchat.tv/js-jabber/171-jsj-babel-with-sebastian-mckenzie" target="_blank" rel="external">recent podcast</a> ([<a href="http://devchat.cachefly.net/javascriptjabber/transcript-171-jsj-babel-with-sebastian-mckenzie-js-jabber.pdf" target="_blank" rel="external">transcript</a>]), Babel’s author Sebastian McKenzie said several things about Babel’s performances, and how outputting more performant code impacts its readability, and how that’s ok because the focus is on performance: “would you care more about your code being pretty or your code being as fast as possible?”, and I agree, it is certainly more important for Babel to be fast than readable.</p>
<p>But he also said the following: “But now it’s just like you really shouldn’t be reading your compiled code anyway.” I have to disagree. In fact, if you indeed care about performances, you most probably <em>should</em> be reading your compiled code. (Now, don’t get met wrong: I think Babel is an awesome piece of software and I love it and I use it everywhere and Sebastian McKenzie et al. are doing a terrific job, and if you think this post is bashing Babel you’re just plain wrong. This disclaimer is probably useless, but I’m new to blogging and it’s kind of scary.)</p>
<p>I would love Babel to improve on this specific point; I can’t promise anything but I’ll try to hack on it. And if it gets me somewhere, I’ll try to write it up. My storytelling needs practice.</p>
<h4 id="Unsupported_phi_use_of_arguments"><a href="#Unsupported_phi_use_of_arguments" class="headerlink" title="Unsupported phi use of arguments"></a>Unsupported phi use of arguments</h4><p>Unsatisfied of my poor understanding of this Crankshaft bailout message I reached out to <a href="http://mrale.ph" target="_blank" rel="external">Vyacheslav Egorov</a>, who first introduced it and promptly clarified he did not add the bailout itself.</p>
<p>I asked him what does <code>blocks_</code> contain in the <code>HGraph::CheckPhis</code> function I mentioned earlier:</p>
<blockquote>
<p>Blocks will contain CFG (control flow graph) blocks — these are not blocks in the syntactical sense, e.g. <code>x ? y : z</code> is not a block in JavaScript but will be 4 blocks in the CFG — once optimizing compiler gets to it.</p>
</blockquote>
<p>What’s up with this <em>Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</em> rule? Why does <a href="https://gist.github.com/vhf/a884c556a70bdcf21fbc" target="_blank" rel="external">this code</a> not trigger a bailout?</p>
<blockquote>
<p>This limitation is still there — but it does not apply to strict functions. I think you somehow run your code in strict mode that’s why you don’t see a bailout.</p>
</blockquote>
<p>Indeed, I ran my tests in strict mode.</p>
<p>Regarding the second point of my conclusion, he said:</p>
<blockquote>
<p>Allocating array (and hope it will get handled by some optimization pass in the V8) is a bad idea.</p>
</blockquote>
<p>Thanks to Vyacheslav, this bailout message starts to make sense to me. He could have only answered the few questions I sent him by email. Instead, he was kind enough to answer them, read a draft of this blog post, and even went on to write a thorough and clear explaination of <em>Unsupported phi use of arguments</em> on his blog: <a href="http://mrale.ph/blog/2015/11/02/crankshaft-vs-arguments-object.html" target="_blank" rel="external">Crankshaft vs arguments object</a> — which I still need to digest.</p>
<h4 id="A_few_side_notes"><a href="#A_few_side_notes" class="headerlink" title="A few side notes"></a>A few side notes</h4><ul>
<li><a href="https://github.com/babel/babel/tree/v5.8.33/packages/babel/test/fixtures/transformation/es6.tail-call/recursion" target="_blank" rel="external">es6.tailCall recursion test case including default parameter</a>: Interesting test case with regards to V8 optimization: first because <code>_x2</code> (a defined parameter) gets reassigned which triggers <em>Assignment to parameter in arguments object</em> bailout reason, secondly because if we <code>var __x2 = _x2</code> and don’t reassign <code>_x2</code> we get the infamous <em>Unsupported phi use of arguments</em>.</li>
<li>Why the title of this post might be too specific: I have not investigated (yet?) whether <em>Unsupported phi use of arguments</em> is only triggered by Babel generated ES5 in the specific <em>TCO + default parameter</em> case or is also present in other Babel generated ES5 <em>default parameter</em> cases.</li>
<li>Why these artifical examples: because they are short and easy to reason about. Also, cf. the following point:</li>
<li>How did you come up with this thing? One of might projects depends on underscore, which does not have an equivalent of <a href="https://lodash.com/docs#get" target="_blank" rel="external"><code>get</code></a>. So I quickly drafted the tail rec <code>_.get</code> I was dreaming of, then googled for a bit and found John-David Dalton’s <a href="https://github.com/jashkenas/underscore/issues/2268#issuecomment-128731431" target="_blank" rel="external"><code>_.reduce(path, _.partial(_.result, _, _, void 0), object)</code></a> (which felt like too much black magic for me). But me being curious and it being a cold evening, I benchmarked both solutions. And mine was awfully slow. So I asked V8 about it, discovered the <em>phi</em> thing, reimplemented my recursive <code>get</code> without its default parameter, ran the benchmark again and got this: <code>TCO 676,411(±0.43%) | 674,426(±0.49%) JDD</code>. So, basically the same performances. Underscore never fails to impress me! Which led to two things: 1/ I kept my nice recursive <code>get</code> because it’s more readable, 2/ I spent my weekend researching+writing this blog post.</li>
<li>I know I should probably not rely on this benchmark package and should do cpu profiling instead, and that it’s easy to do with V8, etc. I think the timing differences shown here are big enough to decide that for this particular post, benchmark is good enough. But I’ll do better next time.</li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[Babel might prevent some V8 optimizations to happen. Also, have you heard about Unsupported Phi Use of Arguments?]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="babel" scheme="https://vhf.github.io/blog/tags/babel/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6 Destructuring]]></title>
    <link href="https://vhf.github.io/blog/2015/10/28/es6-destructuring/"/>
    <id>https://vhf.github.io/blog/2015/10/28/es6-destructuring/</id>
    <published>2015-10-28T14:29:42.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Destructuring works exactly as its syntax suggests</li>
<li>The only tricky point is object destructuring without variable declaration<ul>
<li>with declaration: <code>let {x: a} = {x: &#39;a&#39;};</code></li>
<li>without declaration: <code>({x: a} = {x: &#39;a&#39;});</code> (assuming that <code>a</code> has already been declared)</li>
<li>It’s simply because <a href="http://stackoverflow.com/questions/17382024/why-is-a-bare-array-valid-javascript-syntax-but-not-a-bare-object" target="_blank" rel="external">a bare object is not valid syntax</a></li>
</ul>
</li>
<li>Default arguments and destructuring:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* prop === 'default' */</span> <span class="keyword">let</span> &#123; prop = <span class="string">'default'</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="comment">/* prop === 'value' */</span>   <span class="keyword">let</span> &#123; prop = <span class="string">'default'</span> &#125; = &#123; prop: <span class="string">'value'</span> &#125;;</span><br><span class="line"><span class="comment">/* name === 'value' */</span>   <span class="keyword">let</span> &#123; prop: name = <span class="string">'default'</span> &#125; = &#123; prop: <span class="string">'value'</span> &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>Default arguments also work for arrays:<ul>
<li><code>let [head = &quot;default&quot;] = [];</code></li>
</ul>
</li>
<li>Default values for destructuring assignment is especially useful as function arguments defaults:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> destructObject = (&#123; a = <span class="string">'a'</span>, b = <span class="string">'b'</span> &#125; = &#123;&#125;) =&gt; [a, b];</span><br><span class="line"><span class="keyword">let</span> destructObject = (&#123; a: arg1 = <span class="string">'a'</span>, b: arg2 = <span class="string">'b'</span> &#125; = &#123;&#125;) =&gt; [arg1, arg2];</span><br><span class="line">destructObject(&#123;&#125;);       <span class="comment">// ['a', 'b]</span></span><br><span class="line">destructObject(&#123; b: <span class="string">'c'</span> &#125;); <span class="comment">// ['a', 'c']</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[A few things about destructuring and assigning default values.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Promises]]></title>
    <link href="https://vhf.github.io/blog/2015/10/27/javascript-promises/"/>
    <id>https://vhf.github.io/blog/2015/10/27/javascript-promises/</id>
    <published>2015-10-27T18:37:41.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    <content type="html"><![CDATA[<p>I read <a href="https://60devs.com/best-practices-for-using-promises-in-js.html" target="_blank" rel="external">Best Practices for Using Promises in JS</a>. Here are some concise notes expanding on this topic.</p>
<ul>
<li>Let’s use bluebird as Promise implementation for node</li>
<li>Use <code>.then().catch()</code> instead of <code>.then(successCb, failCb)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = (shouldResolve) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldResolve) &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject();</span><br><span class="line">  &#125;&#125;);</span><br><span class="line"></span><br><span class="line">promise(arg)</span><br><span class="line">  .then(() =&gt; &#123; <span class="comment">/* success */</span> &#125;)</span><br><span class="line">  .catch(ExceptionToCatch, OtherExceptionToCatch, (err) =&gt; &#123; <span class="comment">/* error */</span>&#125;)</span><br><span class="line">  .catch(StrangeExceptionToCatch, (err) =&gt; &#123; <span class="comment">/* error */</span>&#125;)</span><br><span class="line">  .catch((err) =&gt; &#123; <span class="comment">/* error */</span>&#125;); <span class="comment">// default</span></span><br></pre></td></tr></table></figure>
<p>To define an exception to catch:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCustomError</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">MyCustomError.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Error</span>.prototype);</span><br><span class="line"></span><br><span class="line">promise(arg)</span><br><span class="line">  .then(() =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> MyCustomError() &#125;)</span><br><span class="line">  .catch(MyCustomError, (err) =&gt; &#123;&#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Promise.all([promiseA(a), promiseB(b)])</code> runs two async functions in parallel, but <code>.then(() =&gt; {})</code> callback has no data result argument</li>
<li>Use <code>.spread</code> instead of <code>.then</code> to get this data: <code>.spread((dataA, dataB) =&gt; {})</code></li>
<li>To limit concurrency, <code>Promise.map([lotsOfStuff], promise, { concurrency: 3 }).then(() =&gt; {})</code></li>
<li>See also <code>.reduce</code> and <code>.filter</code></li>
<li>You can “pipe” your <code>.then</code> functions. If you do this, you should probably avoid using anonymous functions and enjoy more reusability, modularity, testability, readability</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readFile(data)</span><br><span class="line">  .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">  .then(treatStuff)</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<ul>
<li>Don’t abuse this thing. It’s nice to read, but it breaks the event loop and could introduce race conditions</li>
<li>A better approach is to pipe inside the <code>.then</code>:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readFile(data)</span><br><span class="line">  .then(pipe(<span class="built_in">JSON</span>.parse, treatStuff))</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<h2 id="Further_reading_3A"><a href="#Further_reading_3A" class="headerlink" title="Further reading:"></a>Further reading:</h2><ul>
<li><a href="http://bluebirdjs.com" target="_blank" rel="external">http://bluebirdjs.com</a></li>
<li><a href="https://promise-nuggets.github.io" target="_blank" rel="external">https://promise-nuggets.github.io</a></li>
<li><a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="external">http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html</a></li>
<li><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md" target="_blank" rel="external">https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md</a></li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[Promises, and what bluebird can do to help.]]>
    
    </summary>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="promises" scheme="https://vhf.github.io/blog/tags/promises/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
  </entry>
  
</feed>
