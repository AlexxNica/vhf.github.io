<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>concise notes</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://vhf.github.io/blog/"/>
  <updated>2016-11-28T19:43:36.000Z</updated>
  <id>https://vhf.github.io/blog/</id>
  
  <author>
    <name>victor felder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript Engines Hidden Classes (and Why You Should Keep Them in Mind)</title>
    <link href="https://vhf.github.io/blog/2016/11/28/javascript-engines-hidden-classes/"/>
    <id>https://vhf.github.io/blog/2016/11/28/javascript-engines-hidden-classes/</id>
    <published>2016-11-28T17:40:48.000Z</published>
    <updated>2016-11-28T19:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>When V8 lead engineer Lars Bak<sup id="a1"><a href="#f1" title="Jump to footnote">1</a></sup> <a href="https://www.youtube.com/watch?v=hWhMKalEicY" target="_blank" rel="external">describes</a> V8 design decisions, the first thing he talks about are hidden classes.</p>
<p>To better understand hidden classes we need to know what problem they solve. This article is a first introduction to this concept. It will:</p>
<ol>
<li>cover fast property access because it’s something hidden classes make possible,</li>
<li>explain what hidden classes are and where they come from,</li>
<li>tell you how you can observe them in their natural habitat because Chromium provides us with an awesome microscope,</li>
<li><del>say a few things about inline caching because here as well using hidden classes can lead to big performance boost,</del></li>
<li><del>show you why keeping them in mind can improve your JavaScript performance eg. by avoiding property deletion or polymorphic call-sites.</del><sup id="a2"><a href="#f2" title="Jump to footnote">2</a></sup></li>
</ol>
<h3 id="Properties-in-an-OO-World"><a href="#Properties-in-an-OO-World" class="headerlink" title="Properties in an OO World"></a>Properties in an OO World</h3><p>In a class-based object-oriented language such as Smalltalk or Java in which you cannot add or delete properties from an object on the fly, accessing properties is generally not costly. You can store object properties at fixed memory offsets because the object layout for an instance of a given class will never change. In this case, accessing a property can often be done with a single instruction: load the thing located at the given memory offset.</p>
<p>In an imaginary Java virtual machine, a Java object could be stored in memory as a simple structure which is the exact same for all instances of a same class. The properties (attributes, methods, …) are either primitive Java types (int, float, …) or pointers (to arrays, functions, …). This structure doesn’t hold the “whole” object data, it merely holds references (memory offsets) to where the “real” data is stored. Or as another JVM could do, an object could be stored as three simple pointers: the first one to the class object representing the type of the object, the second one to a table holding pointers to the object’s methods, the third one to the memory allocated for the object data.</p>
<p>At this point, you noticed I’m mainly talking about strategies to store an object in memory and access their properties. We call this <strong>property access</strong> which means retrieving the value of an object property. It’s a mechanism we use all the time, here is how we leverage it in JavaScript:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> o = &#123; <span class="comment">// object</span></div><div class="line">  f: <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">13</span>),</div><div class="line">  <span class="number">1337</span>: <span class="number">13.37</span> + <span class="number">20</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">o.f <span class="comment">// property access =&gt; function f</span></div><div class="line">o[<span class="number">1337</span>] <span class="comment">// property access =&gt; 33.37</span></div><div class="line">o.f(o[<span class="number">1337</span>]) <span class="comment">// performs two property accesses and one function call =&gt; 42</span></div></pre></td></tr></table></figure>
<p>As you may know, JavaScript is prototype-based (and class-free, not class-based).</p>
<blockquote>
<p>Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don’t need classes to make lots of similar objects.</p>
<p class="quote-author"><a href="http://javascript.crockford.com/prototypal.html" target="_blank" rel="external">Douglas Crockford</a></p>
</blockquote>
<p>Not only are objects created by “cloning” existing prototypes, they can also be created by using the <em>literal</em> notation (or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer" target="_blank" rel="external"><em>initializer</em> notation</a>) which you then can just as easily modify on the fly.</p>
<p>An important part of running some JavaScript code is creating objects, putting them in memory and retrieving them or only retrieving some of their properties. We will focus here on <a href="https://tc39.github.io/ecma262/#sec-ordinary-object" target="_blank" rel="external">ordinary JavaScript objects</a> (as opposed to <a href="https://tc39.github.io/ecma262/#sec-exotic-object" target="_blank" rel="external">exotic objects</a>) and discuss property access techniques.</p>
<h3 id="The-Property-Access-Problem-Dynamic-Lookups-are-Slow"><a href="#The-Property-Access-Problem-Dynamic-Lookups-are-Slow" class="headerlink" title="The Property Access Problem: Dynamic Lookups are Slow"></a>The Property Access Problem: Dynamic Lookups are Slow</h3><p>Let’s get back to the topic: how can we implement property access? Looking at what the ECMAScript 2015 specification proposes is a good starting point.</p>
<p>Under section <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-and-exotic-objects-behaviours" target="_blank" rel="external">9 Ordinary and Exotic Objects Behaviours</a>, <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver" target="_blank" rel="external">9.1.8 [[Get]]</a> describes the following algorithm (simplified for the purpose of this article):</p>
<p>When we do <code>obj[prop]</code> or <code>obj.prop</code>, …</p>
<ol>
<li>Make sure <code>typeof prop</code> is either <code>&#39;string&#39;</code> or <code>&#39;symbol&#39;</code>. (<code>obj[13]</code> does in fact <code>obj[&#39;13&#39;]</code>.)</li>
<li>If <code>prop</code> is a direct property of <code>obj</code> and <code>obj[prop]</code> is not <code>undefined</code>, return <code>obj[prop]</code>. End.</li>
<li>If <code>prop</code> is not a direct property of <code>obj</code> or if <code>obj[prop]</code> is <code>undefined</code>, then<br>a. Let <em>parent</em> be <code>obj</code>‘s prototype<br>b. Do the same as <code>2.</code> using <em>parent</em> instead of <code>obj</code>.<br>c. If <em>parent</em> is <code>null</code>, return <code>undefined</code>. End.<br>d. Go down the prototype chain: go back to <code>1.</code> but with <em>parent</em> instead of <code>obj</code> (which means it’ll retry the same procedure with <code>parent[prop]</code>).</li>
</ol>
<p>This is called <em>dynamic lookup</em>. This lookup is <em>dynamic</em> because at runtime we try to find <code>prop</code> on <code>obj</code>, if we fail we try the same on its prototype, then on the prototype’s prototype, etc.</p>
<p>We could implement a (big) dictionary (or associative array) where you would store all the objects used by the program. Keys would be references to objects and the values would in turn be dictionaries with their properties as key and values:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Your JavaScript code:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Point(<span class="number">5</span>, <span class="number">9</span>);</div><div class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> Point(<span class="number">12</span>);</div><div class="line"><span class="keyword">const</span> lit = &#123; <span class="attr">name</span>: <span class="string">'Bond'</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// The JavaScript engine's dictionary storing the objects</span></div><div class="line"><span class="keyword">const</span> allObjects = &#123;</div><div class="line">  <span class="attr">o0</span>: &#123; <span class="comment">// p1</span></div><div class="line">    __proto__: <span class="string">'p6a1251'</span>, <span class="comment">// Object&#123;constructor: Point(x, y), __proto__: Object&#123;constructor: Object()&#125;&#125;</span></div><div class="line">    x: <span class="number">12</span>,</div><div class="line">    <span class="attr">y</span>: <span class="number">3</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">o1</span>: &#123; <span class="comment">// p2</span></div><div class="line">    __proto__: <span class="string">'p6a1251'</span>, <span class="comment">// Object&#123;constructor: Point(x, y), __proto__: Object&#123;constructor: Object()&#125;&#125;</span></div><div class="line">    x: <span class="number">5</span>,</div><div class="line">    <span class="attr">y</span>: <span class="number">9</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">o2</span>: &#123; <span class="comment">// p3</span></div><div class="line">    __proto__: <span class="string">'p6a1251'</span>, <span class="comment">// Object&#123;constructor: Point(x, y), __proto__: Object&#123;constructor: Object()&#125;&#125;</span></div><div class="line">    x: <span class="number">12</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">o3</span>: &#123; <span class="comment">// lit</span></div><div class="line">    __proto__: <span class="string">'p419ecc'</span>, <span class="comment">// Object&#123;constructor: Object()&#125;</span></div><div class="line">    name: <span class="string">'Bond'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>V8 is not implemented in JavaScript, but this should give you a basic idea of how we could store all the objects used in a JavaScript program using a dictionary. (This dictionary would probably be implemented as a hash table.)</p>
<p>Now let’s say we want to get <code>p1.z</code>, <code>p1</code> being the first object created in our program hence having <code>o0</code> as reference. Let’s roughly follow the algorithm we took from the ECMAScript spec:</p>
<ol>
<li>Find <code>o0</code> in <code>allObjects</code> (<em>lookup</em> to resolve the object’s location in memory),</li>
<li>Find a property named <code>&quot;x&quot;</code> in <code>o0</code> (<em>dynamic lookup</em> to resolve the property’s location in memory) and return its value. (Should we have tried <code>p1.x</code>, we could have stopped here, returning <code>12</code>.)</li>
<li>Since <code>o0</code> does not have a property named <code>&quot;x&quot;</code>, fetch <code>o0.__proto__</code> to see if it has a property named <code>&quot;x&quot;</code>, otherwise look if <code>o0.__proto__.__proto__</code> has a property named <code>&quot;x&quot;</code>, repeat this process down the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">prototype chain</a> until <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto" target="_blank" rel="external"><code>__proto__</code></a> is <code>null</code> (which means no object prototype was found).</li>
</ol>
<p>As you can probably guess, this process is not efficient.</p>
<h3 id="The-Property-Access-Solution-Hidden-classes"><a href="#The-Property-Access-Solution-Hidden-classes" class="headerlink" title="The Property Access Solution: Hidden classes"></a>The Property Access Solution: Hidden classes</h3><p>Instead of resorting to dynamic lookup to access properties, V8 implements <em>hidden classes</em>, a concept originally present in another prototype-based programming language: SELF. Here is a quote from the abstract of the 1989 paper which first described this idea: (emphasis is mine)</p>
<blockquote>
<p>[…] SELF implementation runs twice as fast as the fastest Smalltalk implementation, <strong>despite SELF’s lack of classes</strong> and explicit variables.</p>
<p><strong>To compensate for the absence of classes, our system uses implementation-level <em>maps</em> to transparently group objects cloned from the same prototype</strong> […]</p>
<p class="quote-author"><a href="http://dl.acm.org/citation.cfm?doid=74878.74884" target="_blank" rel="external">C. Chambers, D. Ungar, and E. Lee. “An Efficient Implementation Of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes.” <em>SIGPLAN Not. 24</em>, no. 10 (September 1989): 49–70.</a></p>
</blockquote>
<p><em>Hidden class</em> is a better, more explicit name for what this paper calls a <em>map</em>. It makes reference to SELF and avoids confusion with the <em>Map</em> data structures and their JavaScript implementation <em><a href="ecmamap">Map Objects</a></em>, although in fact they really are named <em>maps</em> in V8. This short vocabulary brief will prove handy when we’ll start digging into V8. I’ll mostly stick to the <em>hidden classes</em> terminology but don’t be surprised if I drop a <em>map</em> here and there for variety.</p>
<p>Most of the modern JavaScript engines we use today implement similar approaches or hidden classes variants. Safari <a href="https://en.wikipedia.org/wiki/WebKit#JavaScriptCore" target="_blank" rel="external">JavaScriptCore</a> has <em>structures</em>. Microsoft Edge’s ChakraCore has <em><a href="http://abchatra.github.io/Type/" target="_blank" rel="external">type</a>s</em>. Firefox’ SpiderMonkey has <em>shapes</em>:</p>
<blockquote>
<p>There are a number of data structures within SpiderMonkey dedicated to making object property accesses fast. The most important of these are Shapes. […] Shapes are linked into linear sequences called “shape lineages”, which describe object layouts. Some shape lineages are shared and live in “property trees”. Other shape lineages are unshared and belong to a single JS object; these are “in dictionary mode”.</p>
<p class="quote-author"><a href="https://blog.mozilla.org/nnethercote/2011/11/01/spidermonkey-is-on-a-diet/" target="_blank" rel="external">Nicholas Nethercote</a> (<a href="http://www.masonchang.com/blog/2008/5/28/spidermonkeys-secret-object-sauce.html" target="_blank" rel="external">more</a>)</p>
</blockquote>
<p>Everyone seems to use variants of these hidden classes but what do they look like, how are they generated? Let’s take a look at what V8 does. Here is our Point function again:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Point(<span class="number">13</span>, <span class="number">37</span>);</div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Point(<span class="number">2</span>);</div><div class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> Point();</div><div class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> Point(<span class="number">4</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>From what we read about hidden classes (or maps) we could expect our engine to create a map for <code>Point</code> as soon as it assigns <code>p1</code> and reuse this same map for <code>p2</code>, <code>p3</code> and <code>p4</code>. Not quite. We are in fact looking at 3 related but different maps here. (Although this part is well illustrated in <a href="https://developers.google.com/v8/design" target="_blank" rel="external">V8 design reference</a>, their documentation hasn’t been updated for almost 4 years and it’s worth paraphrasing.)</p>
<p>Let’s start with the first part of our code. We define a function <code>Point</code> which we’ll use as constructor for many points. It has two parameters, <code>x</code> and <code>y</code>, and its objects will remember the arguments we pass to this Point constructor.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>At this point in time V8 puts our function in memory but we don’t really care about this, our point is what happens when we <em>create</em> a point:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Point(<span class="number">13</span>, <span class="number">37</span>);</div></pre></td></tr></table></figure>
<p>When V8 sees our first usage of the <code>Point</code> function (or constructor) to create a new object based on this <code>Point</code> prototype it doesn’t yet know what a Point really looks like, all it knows is <code>function Point</code> so it creates an initial version <code>C0</code> of the hidden class <code>p1</code> needs.</p>
<p><img src="/blog/images/hiddenclasses-step0.svg" alt=""></p>
<p>This first hidden class <code>C0</code> represents a <code>Point</code> object without any property (<code>{}</code>). At the same time, V8 allocates our <code>p1</code> variable as some memory object containing nothing but a <em>class pointer</em> to store the fact that <code>p1</code>‘s hidden class will be <code>C0</code> for now.</p>
<p>Entering the <code>Point</code> function with our arguments <code>13</code> and <code>37</code>, the next thing V8 encounters is <code>this.x = x;</code>, which resolves to <code>this.x = 13;</code>. Aha! The point <code>p1</code> (which is <code>this</code> here) has a property called <code>x</code> and this property is not part of the map <code>C0</code>! First thing first, <code>13</code> is put in memory at this object’s first memory offset (the spots where all the data contained in an object is stored) - we’ll call it <code>offset 0</code>. V8 then creates a new hidden class <code>C1</code> based on <code>C0</code>. What <code>C1</code> brings to the table is a reference to a property named <code>x</code>, for which the data is stored at the object’s <code>offset 0</code>.</p>
<p>V8 modifies <code>C0</code> to tell it that each time an object with the hidden class <code>C0</code> gets a property named <code>x</code> added to it, this object will have to <em>transition</em> to using <code>C1</code> instead as its hidden class.</p>
<p><img src="/blog/images/hiddenclasses-step1.svg" alt=""></p>
<p>Next line is <code>this.y = y;</code>, ie. <code>this.y = 37</code>. Here is what happens internally: First <code>37</code> is stored at the next memory offset, <code>offset 1</code>. Then a new hidden class <code>C2</code> is created by cloning <code>C1</code> (I say <em>cloning</em> because <code>C2</code> is the same as <code>C1</code> at this point: it has a reference to a property named <code>x</code> for which the data is at <code>offset 0</code>). <code>C2</code> receives the additional ability to have a property named <code>y</code>, for which the data can be found at its object’s <code>offset 1</code>.</p>
<p>Now that we have a more capable hidden class than <code>C1</code>, <code>C1</code>‘s <em>transition plan</em> is updated to tell all <code>C1</code> objects that they can transition to using <code>C2</code> should they get a property named <code>y</code> set to them.</p>
<p><img src="/blog/images/hiddenclasses-step2.svg" alt=""></p>
<p>This might all seem a bit schematic and by now you are probably wondering if you could observe this behaviour all by yourself. Fortunately, Chrome developer tools allows us to do just that. Kudos to their team for exposing hidden classes to the end users. Someone at Mozilla told me they considered adding this capability to their own developer tools but nobody implemented it… yet.</p>
<p>If you want to play along, open a tab in Google Chrome or Chromium, fire up the devtools, open the devtools settings (focus the devtools and hit <code>F1</code>) and enable <em>Show advanced heap snapshot properties</em> in the <em>Profiler</em> section of the <em>Preferences</em> tab.</p>
<p>Close the settings, go to the console, copy the following code and evaluate it:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> p0 = <span class="keyword">new</span> Point();       <span class="comment">// C0</span></div><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Point(<span class="number">13</span>);     <span class="comment">// C1 ← C0</span></div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Point(<span class="number">13</span>, <span class="number">37</span>); <span class="comment">// C2 ← C1 ← C0</span></div></pre></td></tr></table></figure>
<p>Switch to the <em>Profiles</em> tab, select <em>Take Heap Snapshot</em> and hit the <em>Take Snapshot</em> button. Once this done, a couple MB of data have been collected and we can use the <em>Class filter</em> box to filter our objects. Just type <em>Point</em>, the name of our function. You should be able to see the three points we just created. I uncollapsed a few object properties, here’s what I see:</p>
<p><img src="/blog/images/hiddenclasses-snapshot.png" alt=""></p>
<p>A few basics to get us started:</p>
<ul>
<li><code>Point @81129</code>: an object with id <code>81129</code>, its prototype is <code>Point</code>. This is <code>p0</code> by the way. Next one is <code>p1</code>, then <code>p2</code>.<ul>
<li><code>__proto__ :: @79373</code> the id of this object’s prototype is <code>79373</code>. See how all our three points have this same prototype with the same id <code>@79373</code>?</li>
</ul>
</li>
</ul>
<p>Note that you can “preview” some objects by hovering their id (eg. <code>@123</code>):</p>
<p><img src="/blog/images/hiddenclasses-snapshot-hover.png" alt=""></p>
<p>Remember when I said that internally V8 hidden classes were named <em>maps</em>? Yep, that’s what we’re looking at, how exciting!</p>
<ul>
<li><code>Point @81129</code><ul>
<li><code>map :: system / Map @79399</code> The hidden class for <code>p0</code>, our <code>C0</code>! Now uncollapse map:<ul>
<li><code>back_pointer :: system / Map @79395</code><ul>
<li><code>back_pointer :: system / Map @79375</code><ul>
<li><code>transition :: system @79435</code><ul>
<li><code>2 :: system / Map @79457</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>Point @81133</code><ul>
<li><code>map :: system / Map @79453</code> The hidden class for <code>p1</code>, ie. <code>C1</code>.</li>
</ul>
</li>
<li><code>Point @81137</code><ul>
<li><code>map :: system / Map @79457</code> The hidden class for <code>p2</code>, ie. <code>C2</code>.</li>
</ul>
</li>
</ul>
<hr>
<p><b id="f1">1</b> Lars Bak spent the last 30 years implementing and optimizing virtual machines. He worked on the SELF, Strongtalk, HotSpot, V8 and now Dart VMs. The best parts of V8 come from his previous experience. From SELF (which is similar to JavaScript in that they’re both prototype-based OO languages) came inline caching, inlining and deoptimization. What was learned from Strongtalk became a big part of HotSpot’s success. Which then heavily influenced V8 (JIT), and then Dart came inspired by Smalltalk, JavaScript, C# and Erlang while its VM only kept the best parts of SELF, Strongtalk and HotSpot. Notice the name <em>HotSpot</em>? It comes from its ability to profile bytecode at runtime and target “hot spots” (frequently executed parts of code, eg. hot functions or hot code) for optimization, just like <a href="http://vhf.github.io/blog/2016/01/22/chromium-chrome-v8-crankshaft-bailout-reasons/#Crankshaft_and_bailouts">V8 does</a>. <a href="#a1" title="Jump back to footnote reference">↩</a></p>
<p><b id="f2">2</b> This was my initial plan. I got lost on my way. The draft of this blog post has been sitting on my hard drive since February. I might publish a follow-up someday. :) <a href="#a2" title="Jump back to footnote reference">↩</a></p>]]></content>
    
    <summary type="html">
    
      An introduction.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>!!Con and a week back at the Recurse Center</title>
    <link href="https://vhf.github.io/blog/2016/05/16/ngw-2016/"/>
    <id>https://vhf.github.io/blog/2016/05/16/ngw-2016/</id>
    <published>2016-05-16T15:36:41.000Z</published>
    <updated>2016-05-16T19:38:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>10 days ago I attended <a href="http://bangbangcon.com" target="_blank" rel="external">!!Con</a>, the most excellent <del>dumpling house</del> programming conference. I was blown away by the quality of the talks, the skills/knowledge/humor of the presenters, the diversity and kindness of both the organizers and the crowd, and the two incredible keynotes <a href="http://cattsmall.com" target="_blank" rel="external">Catt Small</a> and <a href="http://nas.sr" target="_blank" rel="external">Ramsey Nasser</a> gave. The whole conference was also captioned in realtime by <a href="http://stenoknight.com" target="_blank" rel="external">Mirabai Knight</a>.</p>
<p>Here are some <a href="https://github.com/bangbangcon/bangbangcon.github.io/tree/master/2016-speaker-materials" target="_blank" rel="external">slides</a>, the <a href="https://twitter.com/bangbangcon/status/730418049824608256" target="_blank" rel="external">full video recordings</a> of the live stream and the whole <a href="http://aloft.nu/mkk/bangbangconsaturday" target="_blank" rel="external">trans</a>c<a href="http://aloft.nu/mkk/bangbangconsunday" target="_blank" rel="external">ripts</a>.</p>
<p>Besides (having breakfast and) meeting great people there, a few highlights include the following talks, in alphabetical order:</p>
<ul>
<li>Sina Bahram presenting how he uses his phone and computer by listening to his screenreader at 1,000 words per minute. Multimodal interface: using pitch to differentiate uppercase from lowercase!</li>
<li>Sher Minn Chong generating fractal plants with L-Systems</li>
<li>Jake Levine talking about alphabetical ordering in Japanese:<ul>
<li>it turns out Japanese words are usually ordered by how the first syllables sound</li>
<li>which is really tricky for kanjis, because they can be pronounced differently depending on the context in which the word is used</li>
<li>therefore only Japanese speaking humans can properly sort Japanese words!</li>
<li>Apologies to the contributors of <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-ja.md" target="_blank" rel="external">free-programming-books-ja</a> to whom I might have asked to comply with my automatic JavaScript alphabetical ordering checker. :/</li>
</ul>
</li>
<li>Kamal Marhubi OOMing his computer after <a href="https://twitter.com/lablayers/status/729022540358782976" target="_blank" rel="external">holding a pipe in the air using his hands as file descriptors</a></li>
<li>Allison Parrish generating poetry out of the first paragraph of the genesis by applying DST to Word2Vec, here is what I remember from her presentation:<ul>
<li>take word2vec, train it</li>
<li>take an input text, get the vectors for its words</li>
<li>“simplify” or rather lossily compress each of these vectors using a discrete cosine transform</li>
<li>reconstruct the input text word after word by finding for each compressed vector the closest existing word vector</li>
<li>The idea is simply amazing in my opinion, I loved it. So much artistic/fun potential in this!</li>
</ul>
</li>
<li>Mark Phillips showcasing his <a href="http://watersheds.fernleafinteractive.com" target="_blank" rel="external">amazing hydrological interactive map of the US</a></li>
</ul>
<p>I then spent the week at the <a href="http://recurse.com" target="_blank" rel="external">recurse center</a> with around 100 smart passionate people, a few I already knew and was so glad to meet again and many I had never met.</p>
<p>I could probably spend a week writing about what I learned while talking with people there (or reviewing all the awesome food and drinks I had with Carlos). Instead, I’ll mention a few highlights of my week:</p>
<ul>
<li>In Chrome, the backspace key of my MacBook wouldn’t take me to the previous page anymore, so I went to closest person I could find using a Mac and asked him if the same thing was happening to him or if he knew what could be going on. Turns out this person, Sidney, is about to start working on Chrome for OS X at Google! Some digging later, <a href="https://codereview.chromium.org/1922993002/" target="_blank" rel="external">here’s why</a>.</li>
<li>I met David who is building a fascinating HTTP proxy back/front-end in Elixir and was extremely motivated to help me fix my Elixir request thrower. We spent quite some time working on it together, and while facing some weird networking performance issues we turned to Julia who we knew is always keen to dive into weird things. She got interested in Elixir and Erlang, and we learned about stracing all the things!</li>
<li>A few people expressed interest in my recent V8 elucubrations so I threw together a 30’ presentation. Almost 15 people showed up and I finally got to train explaining some of the material I spent weeks gathering!</li>
<li>I got a lot from a chat with Dan about jobs and career opportunities.</li>
<li>Jonathan proposed to pair on an IPFS/JavaScript related project. I didn’t know anything about IPFS, glad I had a glimpse of it. We proceeded to shave a huge yak named Webpack but unfortunately ran out of time.</li>
<li>Nemanja gave a presentation about graphql and the very cool <a href="https://www.meldio.com" target="_blank" rel="external">Meldio</a> he’s building. He also told us interesting anecdotes about statically compiling graphql queries at facebook and passing their IDs instead of the actual queries, and sending UDP packages to preload FB caches before TLS handshakes!</li>
<li>Michael Nielsen gave a research talk about augmenting cognition. What is a computer, what are the possible definitions for what they enable? How can video games or (data/math) visualizations modify our cognition?</li>
<li>Greg Price talked about his work on the upcoming PEP adding static type hints to Python.</li>
</ul>
<p>I had a blast. Awesome week surrounded by awesome people. I kind of want to list everyone I met or hung out with but I won’t. I noticed that when you meet someone for the first time, staying in touch is really hard, almost always it’s like a good intention which takes a huge effort to fulfill. When you meet for the second time, it’s a bit easier to stay in touch afterwards.</p>
<p>I’d like to run a little experiment regarding this. I made a list of people when leaving NYC. Staying in touch with all of them looks impossible to me, I’m always way too cautious when writing emails, it takes me ages. Perhaps I could try writing (at least) once a month to a different person from this list? To check in on their projects/work/lives/etc? (I think answering a short email whenever someone replies to one of my emails is much more feasible than attempting to write to everyone, so I could probably keep the ball rolling?)</p>]]></content>
    
    <summary type="html">
    
      People and programming. Mainly people.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>How Many Websites Provide RSS / Web Syndication Feeds</title>
    <link href="https://vhf.github.io/blog/2016/03/21/rss-usage-on-the-web/"/>
    <id>https://vhf.github.io/blog/2016/03/21/rss-usage-on-the-web/</id>
    <published>2016-03-21T06:20:05.000Z</published>
    <updated>2016-03-21T22:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>I became interested in web syndication feeds recently. It’s an old technology nobody talks about anymore, but everybody still provides them. Taking a look at Google Trends shows us how much people have lost interest in RSS since its peak popularity in 2006:</p>
<script type="text/javascript" src="//www.google.com/trends/embed.js?hl=en-US&q=RSS&cmpt=q&tz=Etc/GMT-1&tz=Etc/GMT-1&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=970&h=330"></script>
<p>It’s an old technology people seem to have lost interest in, but can we still rely on it? Are people abandoning web syndication? With the advent of CMS (eg. the huge popularity of WordPress), static website generators and publishing platforms (eg. Medium) which all provide syndication feeds <em>by default</em>, RSS doesn’t look dead to me.</p>
<p>This is how I became interested in finding how many websites actually do provide at least one XML syndication feed. <a href="http://trends.builtwith.com/feeds/RSS" target="_blank" rel="external">Builtwith</a> has a pretty nifty “trends” section and it states that 33% of the 1 million most visited websites have an RSS feed. While this gives us a pretty good idea, let’s see what we could do by ourselves.</p>
<p>We basically have two options here:</p>
<ol>
<li>Actually crawling the web - a costly and lengthy process</li>
<li>Relying on existing web crawl data</li>
</ol>
<p>Enters CommonCrawl. CommonCrawl is a non-profit founded on the exciting project of crawling tons of web pages and releasing the obtained dataset publicly and for free. Their latest dump was <a href="http://commoncrawl.org/2015/12/november-2015-crawl-archive-now-available/" target="_blank" rel="external">published in November 2015</a> and contains 1.82 billion web pages, amounting to over 151TB of highly compressed HTML. <a href="/blog/2016/02/02/fixing-hiring-through-rss/#f1">I half-jokingly said this before</a>: why not mining CommonCrawl to answer my own question?</p>
<p>A few weeks ago two colleagues of mine mentioned over lunch their desire to mine Common Crawl for their research, and it was a coincidence that I had been thinking about doing the same (though mostly for fun) for a few months. Wouldn’t have we been able to combine our efforts into a single “Common Crawl run”, I most probably wouldn’t have mined this dataset all by myself only to satisfy my curiosity.</p>
<h2 id="Working-with-CommonCrawl"><a href="#Working-with-CommonCrawl" class="headerlink" title="Working with CommonCrawl"></a>Working with CommonCrawl</h2><p>As mentioned before, the latest Common Crawl is 151TB of data hosted on S3. We decided to process it directly from a few EC2 spot instances using the <a href="http://webdatacommons.org/framework/" target="_blank" rel="external">WDC Extraction Framework</a>. Actually this choice was pretty obvious to us because the syndication feeds are not the only thing we wanted to extract from CommonCrawl. My colleagues were interested in extracting all <a href="https://developers.google.com/structured-data/schema-org" target="_blank" rel="external">structured data</a> embedded in any HTML page which is exactly what the WDC framework was designed for. We also wanted to extract all HTML anchors pointing to a Wikipedia page. We <a href="https://github.com/XI-lab/WDCFramework" target="_blank" rel="external">forked the WDC framework</a> and modified it to extract these different things all at once, thus only needing to go through the CommonCrawl dataset once.</p>
<p>Now, CommonCrawl dump consists of HTML web pages and we want to extract parts of it, eg. any <code>&lt;link rel=&quot;alternate&quot; href=&quot;/blog/atom.xml&quot; title=&quot;something&quot; type=&quot;application/atom+xml&quot;&gt;</code> with either RSS/Atom <code>type</code> attribute or <code>rel=&quot;alternate&quot;</code> attribute. Although <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454" target="_blank" rel="external">parsing HTML with regex is a bad idea</a>, constructing a full-blown DOM tree out of each of these 1.82B pages would require far too much time and processing power.</p>
<p>Here’s the regular expression I used to match feeds:</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;link[^&gt;]*(?:<span class="tag">\<span class="name">s</span></span>(?:type=[<span class="tag">\<span class="name">"</span></span>']?(application<span class="tag">\<span class="name">/</span></span>rss<span class="tag">\<span class="name">+</span></span>xml|application<span class="tag">\<span class="name">/</span></span>atom<span class="tag">\<span class="name">+</span></span>xml|application<span class="tag">\<span class="name">/</span></span>rss|application<span class="tag">\<span class="name">/</span></span>atom|application<span class="tag">\<span class="name">/</span></span>rdf<span class="tag">\<span class="name">+</span></span>xml|application<span class="tag">\<span class="name">/</span></span>rdf|text<span class="tag">\<span class="name">/</span></span>rss<span class="tag">\<span class="name">+</span></span>xml|text<span class="tag">\<span class="name">/</span></span>atom<span class="tag">\<span class="name">+</span></span>xml|text<span class="tag">\<span class="name">/</span></span>rss|text<span class="tag">\<span class="name">/</span></span>atom|text<span class="tag">\<span class="name">/</span></span>rdf<span class="tag">\<span class="name">+</span></span>xml|text<span class="tag">\<span class="name">/</span></span>rdf|text<span class="tag">\<span class="name">/</span></span>xml|application<span class="tag">\<span class="name">/</span></span>xml)[<span class="tag">\<span class="name">"</span></span>']?|rel=[<span class="tag">\<span class="name">"</span></span>']?(?:alternate)[<span class="tag">\<span class="name">"</span></span>']?))[^&gt;]*&gt;)"</span><br></pre></td></tr></table></figure>
<p>The WDC framework wrote its results to our S3 bucket in <code>csv.gz</code> format. For the whole run we budgeted 500USD for AWS EC2 instances. We spawned 100 <a href="https://aws.amazon.com/ec2/instance-types/#c3" target="_blank" rel="external">c3.4xlarge</a> EC2 instances (16 cores each) to run our modified WDC framework. Using spot instances saved us some money. It took around 30 hours to process the whole Common Crawl dump and costed less than 450USD, we were right on target.</p>
<p>Most interesting is of course post-processing the data, not extracting it. Here is what our results S3 bucket looks like together with a short explanation of what the result of our various extractions are:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2.3G    /WDC_112015/anchors</span><br><span class="line">60G     /WDC_112015/feeds</span><br><span class="line">54G     /WDC_112015/urls</span><br><span class="line">346G    /WDC_112015/data</span><br><span class="line">408G    /WDC_112015/anchor_pages</span><br><span class="line">37G     /WDC_112015/stats</span><br><span class="line">905G    total</span><br></pre></td></tr></table></figure>
<ul>
<li>(gzipped TSV) <code>anchors: page_url | anchor text | wikipedia_url</code></li>
<li>(gzipped TSV) <code>feeds: page_url | link_tag | link_type</code></li>
<li>(gzipped TSV) <code>urls: page_url</code></li>
<li>(gzipped text) <code>data: &lt;quintuplet&gt;\n</code> (subject, predicate, object, page, extractor_used)</li>
<li>(gzipped json) <code>anchor_pages: {&quot;url&quot;: page_url, &quot;content&quot;: full_html_page}\n</code></li>
<li>(gzipped TSV) <code>stats: arcFileName | arcFilePos | detectedMimeType | hostIp | html-head-meta | html-mf-adr | html-mf-geo | html-mf-hcalendar | html-mf-hcard | html-mf-hlisting | html-mf-hrecipe | html-mf-hresume | html-mf-hreview | html-mf-species | html-mf-xfn | html-microdata | html-rdfa | html-rdfa11 | mimeType | recordLength | referencedData | timestamp | totalTriples | uri</code></li>
</ul>
<p>First step was of course to sync this bucket locally and backup it to our NAS. Once this done and after having triggered security warnings at the network admins office for downloading almost 1TB at full speed, we proceeded to copy this data to <a href="http://daplab.ch" target="_blank" rel="external">DAPLAB</a> hadoop cluster. DAPLAB is an awesome project aiming at providing a powerful data processing cluster on a freemium and premium basis for companies that cannot afford their own cluster, for researchers and scientists, etc. They also organize weekly hacking sessions to which anyone can attend and get access to the cluster for free. Our research lab has been partnering with DAPLAB since the beginning and DAPLAB infrastructure is a very nice complement to our lab’s hadoop cluster. (No more advertising in this post I promise.)</p>
<p>We now have all the data on HDFS, let’s process it. Keep in mind this blog post is about the XML syndication feeds and not how and what we did with the other things we extracted (anchors, RDF triples, etc).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[vfelder@daplab ~]$ hdfs dfs -ls /data/WDC_112015/data/feeds | head -n2</span><br><span class="line">Found 35669 items</span><br><span class="line">1.7M 2016-02-28 15:21 /data/WDC_112015/data/feeds/ex_common-crawl_crawl-data_CC-MAIN-2015-48_segments_1448398444047.40_warc_CC-MAIN-20151124205404-00000-ip-10-71-132-137.ec2.internal.warc.gz.csv.gz</span><br></pre></td></tr></table></figure>
<p>We have 35,669 gzipped TSV files. We don’t want to work with this format and compression because gzip is slow and CSV/TSV is not ideal to query the data. Also, 35k files is a bit too much for a ~10 nodes cluster. We will convert these 35k gzipped TSV to 1,000 snappy-compressed parquet files.</p>
<p>Why converting 35k gunzip csv files to 1,000 snappy parquet files?</p>
<ul>
<li><a href="https://parquet.apache.org/" target="_blank" rel="external">Parquet</a> is better suited for querying (eg. using Hive) than CSV:<ul>
<li>Parquet files contain their schema, CSV don’t.</li>
<li>Parquet files store data by column, CSV is row-based.</li>
<li>Columns of a parquet file are compressed (each column being compressed according to its data type).</li>
</ul>
</li>
<li>Snappy also offers great advantages, here compared to gzip:<ul>
<li>Snappy compression is orders of magnitude faster than gzip.</li>
<li>Snappy happily trades compression against read/write speed. After all, when running a job that loads terabytes of data from HDFS on a cluster, we care more about fast read/write than about sparing a few TB.</li>
</ul>
</li>
<li>Less files means more throughput (as long as we have more files than processing cores of course). If we assume decompressing a file takes 100ms, the decompression alone for all 35k files will take a cumulated one hour. Of course the whole process will be distributed and run in parallel but it still constitutes overhead compared to working on only 1,000 files.</li>
<li>We could have chosen Avro, but our schemas being very basic and our need being to query columns, Parquet made more sense.</li>
</ul>
<p>Remember our TSV “schema” is <code>page_url | link_tag | link_type</code>. It’s a good thing we saved the whole <code>&lt;link</code> tag because I realized after the EC2 run it might be interesting to extract a few other possible attributes. I wrote a short Scala script for Spark to extract these things <strong>and</strong> go from <code>csv.gz</code> to 1,000 <code>.snappy.parquet</code>.</p>
<figure class="highlight scala"><figcaption><span>feedsTransform.scala</span><a href="https://github.com/vhf/wdctools/blob/master/src/main/scala/info/exascale/wdctools/feedsTransform.scala" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> info.exascale.wdctools</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netaporter.uri.<span class="type">Uri</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">StringType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>, sql&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"><span class="keyword">import</span> scala.language.postfixOps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">feedsTransform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">      .setAppName(<span class="string">"TransformFeeds"</span>)</span><br><span class="line">      .set(<span class="string">"spark.sql.parquet.compression.codec"</span>, <span class="string">"snappy"</span>) <span class="comment">// snappy compression for parquet</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> sqlContext = <span class="keyword">new</span> sql.<span class="type">SQLContext</span>(sc)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// schema for the CSV we'll load</span></span><br><span class="line">    <span class="keyword">val</span> feedSchema = <span class="type">StructType</span>(<span class="type">Array</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"page"</span>, <span class="type">StringType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"tag"</span>, <span class="type">StringType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"type"</span>, <span class="type">StringType</span>, <span class="literal">true</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read the CSV with our schema using databricks' spark-csv</span></span><br><span class="line">    <span class="keyword">val</span> df = sqlContext</span><br><span class="line">      .read</span><br><span class="line">      .format(<span class="string">"com.databricks.spark.csv"</span>)</span><br><span class="line">      .option(<span class="string">"header"</span>, <span class="string">"false"</span>)</span><br><span class="line">      .schema(feedSchema)</span><br><span class="line">      .load(<span class="string">"/data/WDC_112015/data/feeds/*.csv.gz"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract from each page url their hostname</span></span><br><span class="line">    <span class="comment">// some URLs (eg. http://example.com:/foo.html) made Uri crash, I had to implement a regex</span></span><br><span class="line">    <span class="comment">// based check</span></span><br><span class="line">    <span class="keyword">val</span> hostnamePattern = <span class="string">"((\\/\\/|https\\:\\/\\/|http\\:\\/\\/)([^\\/\\:]+))"</span>r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> getHost: (<span class="type">String</span> =&gt; <span class="type">String</span>) = (page: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> preFiltered = hostnamePattern findFirstIn page</span><br><span class="line">      <span class="keyword">if</span> (preFiltered.isEmpty) &#123;</span><br><span class="line">        println(<span class="string">s"prefiltering failed: <span class="subst">$page</span>"</span>)</span><br><span class="line">        <span class="string">""</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> preFilteredString = preFiltered.get</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">val</span> host = <span class="type">Uri</span>.parse(preFilteredString).host</span><br><span class="line">          <span class="keyword">if</span> (host.isEmpty) &#123;</span><br><span class="line">            println(<span class="string">s"parsing failed: <span class="subst">$page</span> prefiltered as: <span class="subst">$preFilteredString</span>"</span>)</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            host.get</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> exception = e.toString</span><br><span class="line">            println(<span class="string">s"caught <span class="subst">$exception</span>"</span>)</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract rel="…"</span></span><br><span class="line">    <span class="keyword">val</span> relPattern = <span class="string">".*rel=[\"']?([^'\"]*)[\"']?.*"</span>.r</span><br><span class="line">    <span class="keyword">val</span> getRel: (<span class="type">String</span> =&gt; <span class="type">String</span>) = (tag: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      tag <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="comment">// pattern-matching regex matches is so nice</span></span><br><span class="line">        <span class="keyword">case</span> relPattern(captured) =&gt; captured</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract href="…"</span></span><br><span class="line">    <span class="keyword">val</span> hrefPattern = <span class="string">".*href=[\"']?([^'\"]*)[\"']?.*"</span>.r</span><br><span class="line">    <span class="keyword">val</span> getHref: (<span class="type">String</span> =&gt; <span class="type">String</span>) = (tag: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      tag <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> hrefPattern(captured) =&gt; captured</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract title="…"</span></span><br><span class="line">    <span class="keyword">val</span> titlePattern = <span class="string">".*title=[\"']?([^'\"]*)[\"']?.*"</span>.r</span><br><span class="line">    <span class="keyword">val</span> getTitle: (<span class="type">String</span> =&gt; <span class="type">String</span>) = (tag: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      tag <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> titlePattern(captured) =&gt; captured</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// transform to lowercase</span></span><br><span class="line">    <span class="keyword">val</span> getLCType: (<span class="type">String</span> =&gt; <span class="type">String</span>) = (str: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      str.toLowerCase</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create spark sql user-defined functions for each of these scala function</span></span><br><span class="line">    <span class="keyword">val</span> sqlGetHost = udf(getHost)</span><br><span class="line">    <span class="keyword">val</span> sqlGetRel = udf(getRel)</span><br><span class="line">    <span class="keyword">val</span> sqlGetHref = udf(getHref)</span><br><span class="line">    <span class="keyword">val</span> sqlGetTitle = udf(getTitle)</span><br><span class="line">    <span class="keyword">val</span> sqlGetLCType = udf(getLCType)</span><br><span class="line"></span><br><span class="line">    df</span><br><span class="line">      <span class="comment">// add hostname column based on page column</span></span><br><span class="line">      .withColumn(<span class="string">"hostname"</span>, sqlGetHost(col(<span class="string">"page"</span>)))</span><br><span class="line">      <span class="comment">// add rel column based on tag column</span></span><br><span class="line">      .withColumn(<span class="string">"rel"</span>, sqlGetRel(col(<span class="string">"tag"</span>)))</span><br><span class="line">      <span class="comment">// add href column based on tag column</span></span><br><span class="line">      .withColumn(<span class="string">"href"</span>, sqlGetHref(col(<span class="string">"tag"</span>)))</span><br><span class="line">      <span class="comment">// add title column based on tag column</span></span><br><span class="line">      .withColumn(<span class="string">"title"</span>, sqlGetTitle(col(<span class="string">"tag"</span>)))</span><br><span class="line">      <span class="comment">// replace type column with its lowercase version</span></span><br><span class="line">      .withColumn(<span class="string">"type"</span>, sqlGetLCType(col(<span class="string">"type"</span>)))</span><br><span class="line">      <span class="comment">// only output 1,000 parquet files from the 35k csv.gz input files</span></span><br><span class="line">      .coalesce(<span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// write as parquet to my hdfs home folder</span></span><br><span class="line">      .write.parquet(<span class="string">"/user/vfelder/feeds/feedsparsed.parquet/"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>These 60G total / 35k <code>.csv.gz</code>, once converted to 1k <code>.snappy.parquet</code> with 4 additional columns, now take 187G. Not bad.</p>
<p>We could now create a Hive table like this:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> xi_wdc.feeds (page <span class="keyword">STRING</span>, <span class="keyword">type</span> <span class="keyword">STRING</span>, tag <span class="keyword">STRING</span>, hostname <span class="keyword">STRING</span>, rel <span class="keyword">STRING</span>, href <span class="keyword">STRING</span>, title <span class="keyword">STRING</span>) <span class="keyword">STORED</span> <span class="keyword">AS</span> PARQUET LOCATION <span class="string">'/user/vfelder/feeds/feedsparsed.parquet/'</span>;</span><br></pre></td></tr></table></figure>
<p><code>EXTERNAL</code> means the data for this table isn’t moved by Hive to the tables location, it just stays where it is and Hive loads the data directly from these files. Should we drop this table the data won’t be affected.</p>
<p>I also performed the above <code>csv.gz</code> to <code>snappy.parquet</code> conversion + hostname extraction for <code>/data/WDC_112015/data/urls/</code> which contains all crawled URLs. The Scala program to do this is very similar to the one listed here and can be found <a href="https://github.com/vhf/wdctools" target="_blank" rel="external">here</a>.</p>
<p>Hive is nice to run some queries, but Spark SQL is equally nice and generally offers better performances. It also allows me to run queries directly from the ipython notebook I’m writing this blog post from, get the queries results and rework them directly in python.</p>
<p>The first part of this blog post was writting in Markdown in my ipython notebook running pyspark, the rest of this post is playing with the data directly from ipython, writing pyspark.sql queries and executing them directly from ipython, running them with pyspark over the cluster.</p>
<p>I got this handy *sh alias I’m using to spawn a notebook in a screen:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ipyspark=<span class="string">'IPYTHON_OPTS="notebook --no-browser --ip=localhost --port=1339" pyspark --master yarn-master --conf spark.ui.port=$(shuf -i 2000-65000 -n 1) --num-executors 20 --executor-cores 2 --driver-memory 16g --executor-memory 16g'</span></span><br></pre></td></tr></table></figure>
<h1 id="Let’s-work-with-our-extracted-feeds-and-all-crawled-URLs"><a href="#Let’s-work-with-our-extracted-feeds-and-all-crawled-URLs" class="headerlink" title="Let’s work with our extracted feeds and all crawled URLs"></a>Let’s work with our extracted feeds and all crawled URLs</h1><p>First, import some spark-sql libs.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SQLContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""helper function to display numbers in a human-readable way"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;:,&#125;'</span>.format(n)</span><br></pre></td></tr></table></figure>
<p><code>sc</code> is spark context, it’s already there because we’re running ipython on pyspark.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlContext = SQLContext(sc)</span><br></pre></td></tr></table></figure>
<p>We stored the feeds and urls as snappy compressed parquet files. All we have to do is read them as parquet, everything else is taken care of.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feeds = sqlContext.read.parquet(<span class="string">'/user/vfelder/feeds/feedsparsed.parquet/'</span>)</span><br><span class="line">urls = sqlContext.read.parquet(<span class="string">'/user/vfelder/urls/urlsparsed.parquet/'</span>)</span><br></pre></td></tr></table></figure>
<p>Common Crawl said their dump had 1.82B URLs, let’s check if that’s also the number of web pages we used for our extraction.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'total number of urls'</span>: h(urls.count())&#125;</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;total number of urls&apos;: &apos;1,823,130,936&apos;}
</code></pre><p>Nice, it seems the data matches.</p>
<p>Feeds and URLs files include these two columns : <code>page</code> and <code>hostname</code>, respectively the original URL of the web page and the hostname of this URL. A single web page can provide several feeds but we’re only interested by the number of websites which provide at least one feed, so we take the distinct hostnames. Same with URLs: we crawled a lot of URLs but we are only interested by the number of distinct hostnames, to compare the two numbers.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">distinct_feeds_count = feeds.select(<span class="string">'hostname'</span>).distinct().count()</span><br><span class="line">distinct_urls_count = urls.select(<span class="string">'hostname'</span>).distinct().count()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'hostnames with at least one feed'</span>: h(distinct_feeds_count),</span><br><span class="line">    <span class="string">'hostnames processed'</span>: h(distinct_urls_count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;hostnames processed&apos;: &apos;25,243,438&apos;,
 &apos;hostnames with at least one feed&apos;: &apos;10,294,833&apos;}
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&#123;:0.2f&#125;%'</span>.format(float(distinct_feeds_count)/distinct_urls_count*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&apos;40.78%&apos;
</code></pre><p>Ok, around 40% of the crawled websites provide at least one XML feed.</p>
<p>But on average, how many feeds per webpage?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total_feeds_count = feeds.count()</span><br><span class="line">total_urls_count = urls.count()</span><br><span class="line">float(total_feeds_count)/total_urls_count</span><br></pre></td></tr></table></figure>
<pre><code>1.942656384170972
</code></pre><p>Now it would be interesting to see which standards these feeds implement.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> Column</span><br><span class="line">types_grouped = feeds</span><br><span class="line">    .select(<span class="string">'type'</span>)</span><br><span class="line">    .where(col(<span class="string">'type'</span>) != <span class="string">' '</span>)</span><br><span class="line">    .groupBy(<span class="string">'type'</span>)</span><br><span class="line">    .count()</span><br><span class="line">    .orderBy(desc(<span class="string">'count'</span>))</span><br><span class="line">types_grouped.show()</span><br></pre></td></tr></table></figure>
<pre><code>+--------------------+---------+
|                type|    count|
+--------------------+---------+
| application/rss+xml|877891180|
|application/atom+xml|215504961|
|     application/xml| 20276729|
|            text/xml| 17086738|
| application/rdf+xml| 14669025|
|    application/atom|   545717|
|     application/rdf|   425259|
|     application/rss|   108139|
|            text/rdf|     9637|
|        text/rss+xml|      245|
|            text/rss|      125|
|        text/rdf+xml|       14|
+--------------------+---------+
</code></pre><p>Let’s do some basic stats:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rss_feeds = types_grouped</span><br><span class="line">    .filter(<span class="string">'type LIKE "%rss%"'</span>)</span><br><span class="line">    .agg(&#123;<span class="string">'count'</span>: <span class="string">'sum'</span>&#125;)</span><br><span class="line">    .collect()</span><br><span class="line">rss_total = rss_feeds[<span class="number">0</span>].asDict().values()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">atom_feeds = types_grouped</span><br><span class="line">    .filter(<span class="string">'type LIKE "%atom%"'</span>)</span><br><span class="line">    .agg(&#123;<span class="string">'count'</span>: <span class="string">'sum'</span>&#125;)</span><br><span class="line">    .collect()</span><br><span class="line">atom_total = atom_feeds[<span class="number">0</span>].asDict().values()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">feeds_with_type = types_grouped</span><br><span class="line">    .agg(&#123;<span class="string">'count'</span>: <span class="string">'sum'</span>&#125;)</span><br><span class="line">    .collect()</span><br><span class="line">feeds_with_type_total = feeds_with_type[<span class="number">0</span>].asDict().values()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'RSS'</span>: h(rss_total),</span><br><span class="line">    <span class="string">'Atom'</span>: h(atom_total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;Atom&apos;: &apos;216,050,678&apos;, &apos;RSS&apos;: &apos;877,999,689&apos;}
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rss_pc = float(rss_total)/feeds_with_type_total*<span class="number">100</span></span><br><span class="line">atom_pc = float(atom_total)/feeds_with_type_total*<span class="number">100</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'% RSS'</span>: <span class="string">'&#123;:0.2f&#125;%'</span>.format(rss_pc),</span><br><span class="line">    <span class="string">'% Atom'</span>: <span class="string">'&#123;:0.2f&#125;%'</span>.format(atom_pc),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>{&apos;% Atom&apos;: &apos;18.84%&apos;, &apos;% RSS&apos;: &apos;76.58%&apos;}
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alternate_total = feeds</span><br><span class="line">    .select(<span class="string">'rel'</span>, <span class="string">'type'</span>)</span><br><span class="line">    .where(<span class="string">'rel LIKE "%alternate%" AND (type LIKE "%rss%" OR type LIKE "%atom%")'</span>)</span><br><span class="line">    .count()</span><br><span class="line"><span class="string">'&#123;:0.2f&#125;%'</span>.format(float(alternate_total)/(rss_total+atom_total)*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&apos;97.09%&apos;
</code></pre><p>That’s about it, my questions have been answered!</p>
<h4 id="Let’s-quickly-recap"><a href="#Let’s-quickly-recap" class="headerlink" title="Let’s quickly recap:"></a>Let’s quickly recap:</h4><ul>
<li>Common Crawl is an excellent free dataset.</li>
<li>WDC Framework is a cool tool but requires some tweaking.</li>
<li>It is possible to extract a fair amount of data from this 151TB dump for less than 500USD of EC2.</li>
<li>Out of 1.82B URLs we got 25.2M different hosts.</li>
<li>Processing this data is really fast on DAPLAB’s cluster with my ipython+pyspark setup. This last (<code>alternate_total</code>) query takes &lt;10s.</li>
<li><strong>40.8% of these hostnames provide a web syndication feed.</strong></li>
<li>RSS is the most popular syndication format by far with 76.6%, Atom is at 18.8%.</li>
<li>97.09% of the <code>&lt;link</code> tags pointing to an RSS or Atom feed also specify <code>rel=&quot;alternate&quot;</code>, as the HTML standard recommends.</li>
</ul>]]></content>
    
    <summary type="html">
    
      How to find out? Let&#39;s dig.
    
    </summary>
    
      <category term="project" scheme="https://vhf.github.io/blog/categories/project/"/>
    
      <category term="old tech new ideas" scheme="https://vhf.github.io/blog/categories/project/old-tech-new-ideas/"/>
    
    
      <category term="rss" scheme="https://vhf.github.io/blog/tags/rss/"/>
    
      <category term="spark" scheme="https://vhf.github.io/blog/tags/spark/"/>
    
      <category term="ipython" scheme="https://vhf.github.io/blog/tags/ipython/"/>
    
      <category term="scala" scheme="https://vhf.github.io/blog/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Navigating the ECMAScript® 2015 Language Specification</title>
    <link href="https://vhf.github.io/blog/2016/02/06/navigating-the-ecmascript-2015-language-specification/"/>
    <id>https://vhf.github.io/blog/2016/02/06/navigating-the-ecmascript-2015-language-specification/</id>
    <published>2016-02-06T11:12:12.000Z</published>
    <updated>2016-02-08T19:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reading a language specification is not an easy thing. I thought it would be interesting to show how you can use it to explain some JavaScript questions.</p>
<p>Here is one I encountered a few minutes ago on IRC:</p>
<blockquote>
<p>why can’t we access an array property as <code>xs.0</code> <code>xs.1</code> <code>xs.2</code>?</p>
</blockquote>
<p>Well, explaining the reason why &mdash; the design decisions which led to this “limitation” is not so easy. Finding what the specification says, on the other hand, is not so hard.</p>
<p>We’ll start here: <a href="https://tc39.github.io/ecma262/" target="_blank" rel="external">https://tc39.github.io/ecma262/</a> and we’re looking for the part which talks about accessing properties (accessing any properties, in fact).</p>
<p>If you don’t know where to look, quickly find the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Left-hand-side_expressions" target="_blank" rel="external">corresponding MDN page</a> and see that it’s called a “property accessor” and that it’s a left-hand-side expression.</p>
<p>Back to the ECMAScript specification, find the index at the beginning of the page. <code>12.3 Left-Hand-Side Expressions</code>, good. <a href="https://tc39.github.io/ecma262/#sec-property-accessors" target="_blank" rel="external"><code>12.3.2 Property Accessors</code></a>, perfect!</p>
<p>Now, we want to know what can be used as <code>name</code> in the following syntax: <code>object.name</code>, right? It’s pretty clear:</p>
<p><code>MemberExpression . IdentifierName</code>.</p>
<p>But what is an <code>IdentifierName</code>? A quick search in the page brings us to the following section: <a href="https://tc39.github.io/ecma262/#sec-identifier-names" target="_blank" rel="external"><code>11.6.1 Identifier Names</code></a>.</p>
<pre><code>IdentifierName ::
    IdentifierStart
    IdentifierName IdentifierPart
</code></pre><p>We now know that an <code>IdentifierName</code> has to start with an <code>IdentifierStart</code>, let’s look for <code>IdentifierStart</code> in the page…</p>
<pre><code>IdentifierStart ::
    UnicodeIDStart
    $
    _
    \ UnicodeEscapeSequence

[...]

UnicodeIDStart ::
    any Unicode code point with the Unicode property “ID_Start”
</code></pre><p>An <code>IdentifierStart</code> is either a Unicode code point with the Unicode property “ID_Start” or <code>$</code> or <code>_</code> or a Unicode escape sequence.</p>
<p>Back to the original question: why can’t we do <code>xs.0</code>?</p>
<p>Here, <code>&#39;0&#39;</code> is our <code>IdentifierName</code> and its <code>IdentifierStart</code> is <code>0</code>. Since <code>0</code> is not <code>$</code>, <code>_</code> or a Unicode escape sequence, it has to be a <code>UnicodeIDStart</code> to be a valid property accessor when used with the dot notation.</p>
<p><code>0</code> is the Unicode code point <code>U+0030</code>. Let’s see what’s in there using <a href="https://codepoints.net/U+0030" target="_blank" rel="external">codepoints.net</a>:</p>
<blockquote>
<p>ID Start? ✘</p>
</blockquote>
<p>There it is. <code>0</code> does not have the property “ID_Start”. No ID_Start ⇒ not a valid <code>IdentifierStart</code> ⇒ not a valid <code>IdentifierName</code> ⇒ not a valid property accessor using the dot notation.</p>
<p><em>I’m <a href="https://twitter.com/_vhf" target="_blank" rel="external">@_vhf</a> on Twitter, feel free to follow me there.</em></p>]]></content>
    
    <summary type="html">
    
      Finding answers to your JavaScript questions with the help of the official ECMAScript specification. Here&#39;s how.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
  </entry>
  
  <entry>
    <title>The dangers of HFS+ for git repositories</title>
    <link href="https://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/"/>
    <id>https://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/</id>
    <published>2016-02-04T19:00:00.000Z</published>
    <updated>2016-02-04T19:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>HFS+ is not case sensitive. It took me 6 months to realize this basic fact. It’s one of these things you never bother researching when you consider buying a mac. Last week it hit me hard. I spent 30 minutes trying to fix something that should have been fixed in 30 seconds at most.</p>
<p>A colleague had created <code>File.ext</code> on our website hosted on github pages but printed <code>url/file.ext</code> on important documents they were supposed to hand over to someone. Without access to either Internet or a printer, they asked me to fix this. Easy as pie. Except…</p>
<pre><code>$ mkdir gittest &amp;&amp; cd gittest
$ git init
$ touch File &amp;&amp; ls
File
$ git add File &amp;&amp; git commit -m &quot;add File&quot;
$ mv File file &amp;&amp; ls
file
$ git add file &amp;&amp; git status
On branch master
nothing to commit, working directory clean
</code></pre><p>Oops. At this point, I lost quite some trying different ideas. I could not believe HFS+ was case insensitive, it never even occurred to me, I thought git was playing a trick on me. I ended up doing the following:</p>
<pre><code>$ git rm File &amp;&amp; git add file
$ git commit -m &quot;rename file&quot;
</code></pre><p>The problem being fixed, I investigated a bit.</p>
<pre><code>$ touch a A &amp;&amp; ls
a
$ echo b &gt; a
$ cat A
b
</code></pre><p>I then had to get confirmation on the Internet. Of course, most developers already knew about this. I didn’t. And I currently have more than 70 repositories in my dedicated folder <code>~/repositories</code>. Imagine if one of these had <code>file</code> and <code>File</code> in the same directory when I cloned it.</p>
<p>Here is what I finally did to prevent any future headache.</p>
<pre><code>$ du -ch repositories | grep total
14.8G   total
$ hdiutil create -type SPARSE -fs &apos;Case-sensitive Journaled HFS+&apos; -size 20g ~/volume_repos.dmg
created: ~/volume_repos.dmg.sparseimage
</code></pre><p>I then decided on a mounting point for this volume, added an alias to mount it to my rc file, created a symlink <code>~/repositories</code> -&gt; <code>~/mountpointrepo</code>, moved my repos to the volume.</p>
<pre><code>$ mv repositories backup_repositories
$ echo alias mountrepos=&quot;hdiutil attach ~/volume_repos.dmg.sparseimage -mountpoint /Users/victor/mountpointrepo&quot; &gt; .zshrc
$ source .zshrc
$ mountrepos
$ ln -s /Users/user/mountpointrepo repositories
$ cp -r backup_repositories/.* backup_repositories/* repositories
$ touch repositories/a repositories/A &amp;&amp; ls repositories/
A a
</code></pre><p>Perfect. And the sparse volume will grow without my intervention to fit my <code>~/repositories</code> content.</p>
<p>JetBrains IDEs started complaining though:</p>
<blockquote>
<p>Filesystem Case-Sensitivity Mismatch<br>The project seems to be located on a case-sensitive file system.<br>This does not match the IDE setting (controlled by property “idea.case.sensitive.fs”)</p>
</blockquote>
<p>Even if their doc on this subject is very, very poor, I found the following solution:</p>
<pre><code>echo idea.case.sensitive.fs=true &gt;&gt; Library/Preferences/IntelliJIdea15/idea.properties
</code></pre><p>It feels safer now though I cannot really understand why case insensitive file systems still exist in 2016. Probably because people like me buy macs, I know.</p>]]></content>
    
    <summary type="html">
    
      OSX file system, HFS+, is case insensitive.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
    
      <category term="osx" scheme="https://vhf.github.io/blog/tags/osx/"/>
    
      <category term="file systems" scheme="https://vhf.github.io/blog/tags/file-systems/"/>
    
  </entry>
  
  <entry>
    <title>Fixing Hiring through RSS</title>
    <link href="https://vhf.github.io/blog/2016/02/02/fixing-hiring-through-rss/"/>
    <id>https://vhf.github.io/blog/2016/02/02/fixing-hiring-through-rss/</id>
    <published>2016-02-02T16:17:17.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>From: Victor Felder &lt;me@example.com&gt;</code><br><code>To: &lt;you@example.com&gt;</code></p>
<h2 id="I’m-not-looking-for-work-thanks-for-asking"><a href="#I’m-not-looking-for-work-thanks-for-asking" class="headerlink" title="I’m not looking for work, thanks for asking!"></a>I’m not looking for work, thanks for asking!</h2><p>Really, I appreciate your attention. Both you and I know that sooner or later I’ll be looking for a job again. I understand you might need to hire someone right now. In this case, and if you’re not a recruiter, you could still find my email address on the web and take your chance if you really believe I would be a good fit. Otherwise, if you’re not in a hurry and if you consider I would still be worth hiring in a few months/years/decades or if you think I’d be an awesome colleague, here’s what you could do: Subscribe to <a href="https://vhf.github.io/job.xml">this RSS feed</a> to get notified as soon as I’m back on the job market.</p>
<p>Now, of course I might be stuck in an unsatisfying position and wouldn’t like my boss to be aware that I’m looking for a way out, but I don’t want to be pessimistic. I don’t have the relevant data but I’m not sure most people in my industry switch jobs without spending a few (f)unemployed weeks looking for the best option in between.</p>
<p>Should you subscribe, here is my pledge to you:</p>
<ul>
<li>I will not use this feed if I don’t need to. A publication on this feed will be a definitive signal of my intention of finding a new job. (Or a short message containing a new address for this feed if for whatever reason I need to move it.)</li>
<li>I will publish something on this RSS feed as soon as I need to.</li>
<li>It will contain a very short bio and describe what I’m looking for (in terms of position, company type/size, technology, location, part/full-time, perhaps even remuneration).</li>
<li>It will inform you of my preferred method(s) of contact (to schedule a call, ask for a full CV, etc).<br>&nbsp;</li>
</ul>
</blockquote>
<p>This blog post is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons Attribution 3.0 Unported License</a> by Victor Felder.</p>
<p><em>I’m <a href="https://twitter.com/_vhf" target="_blank" rel="external">@_vhf</a> on Twitter, please feel free to follow me. I’ll probably be blogging again about other RSS-related things because unlike a Norwegian Blue parrot, web feed are not dead<sup id="a1"><a href="#f1" title="Jump to footnote">1</a></sup>.</em></p>
<hr>
<p><b id="f1">1</b> Although (according to <a href="https://www.google.com/trends/explore#q=%2Fm%2F035c93%2C%20%2Fm%2F0n5tx&amp;cmpt=q&amp;tz=Etc%2FGMT-1" target="_blank" rel="external">Google Trends</a>) interest for web feeds in the general public has been steadily declining since December 2005, more than a third of the top 1,000,000 most visited websites are providing an XML feed according to <a href="http://trends.builtwith.com/feeds/" target="_blank" rel="external">builtwith</a>. Please get in touch if you have relevant data, e.g. if you know whether this &gt;33% statistic is in a down- or uptrend. We could even mine <a href="https://commoncrawl.org/" target="_blank" rel="external">Common Crawl</a> for XML feeds presence with subdomain granularity. Any help much appreciated. <a href="#a1" title="Jump back to footnote reference">↩</a></p>]]></content>
    
    <summary type="html">
    
      What if people had feeds companies could subscribe to, to be notified when start looking for work?
    
    </summary>
    
      <category term="project" scheme="https://vhf.github.io/blog/categories/project/"/>
    
      <category term="old tech new ideas" scheme="https://vhf.github.io/blog/categories/project/old-tech-new-ideas/"/>
    
    
      <category term="rss" scheme="https://vhf.github.io/blog/tags/rss/"/>
    
      <category term="hiring" scheme="https://vhf.github.io/blog/tags/hiring/"/>
    
  </entry>
  
  <entry>
    <title>Enhancing GitHub with Chrome extensions</title>
    <link href="https://vhf.github.io/blog/2016/01/30/enhancing-github-with-chrome-extensions/"/>
    <id>https://vhf.github.io/blog/2016/01/30/enhancing-github-with-chrome-extensions/</id>
    <published>2016-01-30T17:18:18.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you ever maintained a popular GitHub project, you might have suffered from a couple of things:</p>
<ul>
<li>Your GitHub news feed became <a href="/images/github-feed.png">useless</a> because stars, issues/PR comments, wiki edits notifications were burying the notifications you were interested in in an endless flood.</li>
<li>You spent a lot of time repeating the same things over and over on your project’s issues or PRs, such as <em>Thanks for your contribution! Please read the <a href="https://github.com/vhf/free-programming-books/blob/master/CONTRIBUTING.md#formatting" target="_blank" rel="external">Formatting section of our <code>CONTRIBUTING.md</code></a>and fix your PR accordingly.</em> (While still adding a custom comment to each contributor pointing them at what they did wrong or how they can fix it, of course.)</li>
</ul>
<p>And since we spend so much time on GitHub, why not also customizing it in some fun ways?</p>
<p>Here are four Chrome extensions for GitHub I enjoy using – and they are all compatible with each others.</p>
<h3 id="dashboard-src"><a href="#dashboard-src" class="headerlink" title="dashboard (src)"></a><a href="https://chrome.google.com/webstore/detail/dashboard/pcnaddhmngnnpookfhhamkelhhakimdg" target="_blank" rel="external">dashboard</a> (<a href="https://github.com/muan/dashboard" target="_blank" rel="external">src</a>)</h3><p>dashboard inserts a row of checkboxes at the top of your GitHub feed. Toggling these checkboxes show/hide specific types of notifications. For example you could use it to hide all fork notifications. Or only show new issues/PR notifications.</p>
<p>I use it to quickly navigate in my feed.</p>
<h3 id="github-feed-blacklist-src"><a href="#github-feed-blacklist-src" class="headerlink" title="github-feed-blacklist (src)"></a><a href="https://chrome.google.com/webstore/detail/github-feed-blacklist/dbhboodpldcdeolligbmnhnjpkkolcnl" target="_blank" rel="external">github-feed-blacklist</a> (<a href="https://github.com/vhf/github-feed-blacklist" target="_blank" rel="external">src</a>)</h3><p>dashboard is great and all but what if you only want to hide star notifications and issues/PR comments coming from a specific repository? github-feed-blacklist got your back. It adds an icon to your extensions list, clicking it provides you with a way to add (remove) repositories to the list and blacklist notifications for each repo you added by checking boxes. (Keep in mind it’s a <em>blacklist</em>: check a box to hide, not the opposite.) To keep your feed “full”, it automatically loads the next notifications until 50 notifications are displayed. It also adds a counter at the top of your feed to tell you how many notifications have been hidden - clicking this counter will temporarily show them all. The UI is kinda ugly but heh, I’m no design ninja.</p>
<p>I use it to mute specific notification types coming from specific repos.</p>
<h3 id="GitHub-Canned-Responses-src"><a href="#GitHub-Canned-Responses-src" class="headerlink" title="GitHub Canned Responses (src)"></a><a href="https://chrome.google.com/webstore/detail/github-canned-responses/lhehmppafakahahobaibfcomknkhoina" target="_blank" rel="external">GitHub Canned Responses</a> (<a href="https://github.com/notwaldorf/github-canned-responses" target="_blank" rel="external">src</a>)</h3><p>GitHub Canned Responses adds a button inside the issues/PR comment form. Activating it will allow you to insert a predefined answer in the comment form. The saved canned answers list can be edited to modify the existing ones, add your own or delete the ones you don’t need.</p>
<p>I intend to use it to insert repetitive answers to the PRs I got, I’m sure it will prove particularly useful to avoid having to explain the same stuff over and over again, for example to tell people that a failed Travis run on a PR means they should go check Travis’ logs and actually fix their commits or ask for help.</p>
<h3 id="Isometric-Contributions-src"><a href="#Isometric-Contributions-src" class="headerlink" title="Isometric Contributions (src)"></a><a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" target="_blank" rel="external">Isometric Contributions</a> (<a href="https://github.com/jasonlong/isometric-contributions" target="_blank" rel="external">src</a>)</h3><p>Isometric Contributions is the fun one. It does not serve a particularly useful purpose. All it does is rendering a GitHub user contribution graph (the small squares you keep abusing to draw cat emojis or propose to your SO, you know) as isometric pixel art. And it’s beautiful.</p>
<p>Please tweet me <a href="https://twitter.com/_vhf" target="_blank" rel="external"><code>@_vhf</code></a>if you think I forgot your favorite GitHub Chrome extension!</p>]]></content>
    
    <summary type="html">
    
      GitHub lacks a few features which might be useful for popular projects maintainers. Here are some helpful Chrome extensions.
    
    </summary>
    
      <category term="project" scheme="https://vhf.github.io/blog/categories/project/"/>
    
      <category term="tools" scheme="https://vhf.github.io/blog/categories/project/tools/"/>
    
    
      <category term="chrome" scheme="https://vhf.github.io/blog/tags/chrome/"/>
    
      <category term="github" scheme="https://vhf.github.io/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Chromium, Chrome, Node.js, V8, Crankshaft and bailout reasons</title>
    <link href="https://vhf.github.io/blog/2016/01/22/chromium-chrome-v8-crankshaft-bailout-reasons/"/>
    <id>https://vhf.github.io/blog/2016/01/22/chromium-chrome-v8-crankshaft-bailout-reasons/</id>
    <published>2016-01-22T19:20:20.000Z</published>
    <updated>2016-11-28T19:21:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a short summary about all these terms, with a rough description of how V8 works. (It’s rather an overview of how Crankshaft works, really.)</p>
<h2 id="Chromium-Chrome-Node-js"><a href="#Chromium-Chrome-Node-js" class="headerlink" title="Chromium, Chrome, Node.js"></a>Chromium, Chrome, Node.js</h2><p>The Chromium Project is responsible for Chromium’s development. Chromium, released in 2008, is the open-source web browser on which Google Chrome is based. Chromium’s JavaScript engine is V8. Other projects such as the Opera web browser and the Node.js runtime use V8 as their JavaScript engine.</p>
<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p>V8 compiles JavaScript to native machine code and executes it right away. In 2010, the Chromium Project released a new version of V8 including a new compiling infrastructure named Crankshaft (<a href="https://en.wikipedia.org/wiki/Chromium_(web_browser)" target="_blank" rel="external">#1</a>, <a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)" target="_blank" rel="external">#2</a>).</p>
<h2 id="Crankshaft-and-bailouts"><a href="#Crankshaft-and-bailouts" class="headerlink" title="Crankshaft and bailouts"></a>Crankshaft and bailouts</h2><p>The three most important components of Crankshaft are:</p>
<ol>
<li>the base compiler, which compiles JavaScript to machine code as fast as possible without even trying to optimize most of the things,</li>
<li>the runtime profiler, which tracks how much time is spent running which parts of code and identifies <em>hot code</em>, i.e. code worth spending time optimizing, and</li>
<li>the optimizing compiler, which attempts to optimize the previously identified hot code.</li>
</ol>
<p>Optimizing the JavaScript is always a tradeoff. We want both fast loading pages and fast running code, i.e. low start-up time and peak performance. Low start-up time is achieved by the base compiler: V8 compiles and runs the code as soon as it gets it. Peak performance is achieved by the optimizing compiler: Crankshaft optimizes the hot code. Optimizing before first running the code is not a good idea because optimizing takes time which would slow down start-up time. Also, running the unoptimized code allows Crankshaft to gather useful data about <em>how</em> to optimize it.</p>
<p>When the optimizing compiler gets to work, it makes optimistic assumptions about the code it’s optimizing, meaning that it assumes it’s optimizable and does its best.</p>
<p>In some cases, the runtime data (e.g. type information) provided by the base compiler to the optimizing compiler didn’t cover some (edge) cases and the optimizing compiler sends V8 back to run the base compiler compiled code. This is known as a <em>deopt</em>. Later on, the same hot code will be fed to the optimizing compiler again with more runtime data, and could eventually succeed its optimization attemps. If it fails more than 10 times, it will give up with the following bailout reason: “<a href="https://github.com/vhf/v8-bailout-reasons#optimized-too-many-times" target="_blank" rel="external">Optimized too many times</a>“</p>
<p>In some other cases, the optimizing compiler receives code that contains JavaScript features (such as <code>try...catch</code> statements) it doesn’t support, or the code doesn’t respect <a href="/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/">some limits</a> set by the optimizing compiler. In this case, the optimizing compiler will also fall back to the base compiler compiled code. This is known as a <em>bailout</em> (because the optimizing compiler bails out on his optimization attempt), and whenever it happens Crankshaft is kind enough to give us a reason why the bailout happened.</p>
<p>This repo lists all these bailout reasons: <a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a>. The aim of this project is to provide insights by reproducing most of them, explaining why they happened and how to avoid them.</p>
<p>A function which gets optimized can run 100x faster, meaning that it’s kind of wise to learn about these bailout patterns to best avoid them if you care about the JavaScript performances of the code you run on V8 (for instance if you target Chromium/Chrome, Node.js or Opera).</p>
<p>I’ll most probably write a follow up about TurboFan -the new V8 JavaScript optimizing compiler- and what it brings to the table.</p>
<p><em>References on this subject: <a href="http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html" target="_blank" rel="external">#3</a>, <a href="https://github.com/GoogleChrome/devtools-docs/issues/53" target="_blank" rel="external">#4</a>, <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="external">#5</a>, <a href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/" target="_blank" rel="external">#6</a></em></p>]]></content>
    
    <summary type="html">
    
      A short summary about these terms, an overview of how V8 / Crankshaft works.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 49 is coming, with 92% ES2015 coverage!</title>
    <link href="https://vhf.github.io/blog/2016/01/21/Chrome-49-is-coming-with-92-ES2015-coverage/"/>
    <id>https://vhf.github.io/blog/2016/01/21/Chrome-49-is-coming-with-92-ES2015-coverage/</id>
    <published>2016-01-21T20:53:35.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>December 11, Chrome 49 landed on the Dev channel. This week, with already <a href="https://googlechromereleases.blogspot.com" target="_blank" rel="external">two new releases of Chrome 49</a> to the Dev channel, the process seems to intensify.</p>
<p>On Tuesday <a href="http://seththompson.org" target="_blank" rel="external">Seth Thompson</a>, who works on V8, <a href="https://news.ycombinator.com/item?id=10932790" target="_blank" rel="external">wrote on HN</a> that “V8 now has 92% ES6 coverage in Chrome Canary (on track for shipping in Chrome M49)!”</p>
<p>kangax’ awesome <a href="http://kangax.github.io/compat-table/es6/#chrome49" target="_blank" rel="external">ECMAScript compatibility table</a> is already up to date, and Chrome 49’s column looks very green indeed.</p>
<p>Since I talked about both optimizing <strong>rest parameters</strong> in Babel (<a href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">#1</a>, <a href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/">#2</a>) and <strong><a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a></strong> (<a href="https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/">#3</a>, <a href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">#1</a>, <a href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/">#2</a>) on this blog, I thought I would look into it again.</p>
<p>The upcoming version of V8 does support rest parameters, and that’s awesome! But Crankshaft bails out when it encounters one of them (<a href="https://chromium.googlesource.com/v8/v8/+/d3f074b23195a2426d14298dca30c4cf9183f203%5E%21/src/bailout-reason.h" target="_blank" rel="external">#4</a>) instead of optimizing your function, and that’s less awesome. But the engineer who introduced this bailout said (<a href="https://codereview.chromium.org/1272673003" target="_blank" rel="external">#5</a>) they will be optimized by TurboFan instead, awesome again! (He even hinted that all currently “unsafe” usages of the <code>arguments</code> object will be optimized, and that’s <em>very awesome</em>!)</p>
<p>In the meantime, before all of these ES2015 features land in Node, before TurboFan comes in handy, I guess I’ll keep using Babel’s <code>transform-es2015-parameters</code> for my Node code.</p>]]></content>
    
    <summary type="html">
    
      It&#39;s coming, it&#39;s awesome, but some features might still be worth transpiling.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Modifying or Deleting a Line from an Old Commit</title>
    <link href="https://vhf.github.io/blog/2016/01/20/modifying-or-deleting-a-line-from-an-old-commit/"/>
    <id>https://vhf.github.io/blog/2016/01/20/modifying-or-deleting-a-line-from-an-old-commit/</id>
    <published>2016-01-20T22:59:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ll spare you and assume you know what you’re doing, so here’s the short version. Keep reading for a more comprehensive one.</p>
<ol>
<li>Find the commit you want to change or delete</li>
<li>Get the SHA of its parent commit.</li>
<li><code>git rebase -i 1a2b3c4d</code> (1a2b3c4d is the parent)</li>
<li>Replace <code>pick</code> with <code>edit</code></li>
<li><code>git add yourfile</code></li>
<li><code>git commit --amend</code></li>
<li><code>git rebase --continue</code></li>
</ol>
<p>I work alone on most of my side projects. They are experiments, personal documentations, <del>stupid</del> ideas… they have something in common though, they are versioned using git and I’m often their only contributor. Which means that if I want to rewrite the history and <code>git push --force</code>, I can! It won’t break someone else’s work!</p>
<p>Maybe I shouldn’t have stricken out <em>stupid</em> here. Two months ago I had an idea. It came out of nowhere and was very easy to do, so I did it. <em>Let’s log the content of my clipboard every minute!</em></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">cd</span> ~/repositories/clipboard/ &amp;&amp; pbpaste &gt; clipboard.txt &amp;&amp; git aa &amp;&amp; git commit -m <span class="string">"`date`"</span> 2&gt;&amp;1 &gt;/dev/null</span><br></pre></td></tr></table></figure>
<p>This idea being stupid and/or useless does not mean I <em>am</em> stupid or useless, I was obviously not going to push this to a remote server.</p>
<p>But let’s pretend I’d like to anyway. We can very safely assume that doing so would be very unsafe: there are probably a bunch of my passwords in the repo (copy-pasted from my password manager), and private emails (written in my text editor and copy-pasted to my webmail), and kilobytes of source code I wrote at work, etc.</p>
<p>Obviously, trying to delete all potential private data from my clipboard repo would be a hard and painful process of carefully reviewing the content of each of the thousands of commits it contains.</p>
<p>So for the sake of the demonstration, and because I used this post as an excuse to tell you about the futility of logging your clipboard, or because I used the futility of logging my clipboard to blog about how to change / delete an old commit, here’s how you could achieve the removal of <code>mysecret</code> from your git repo without leaving any trace (given that nobody cloned or forked your repo):</p>
<ol>
<li>Find the commit you want to change or delete:<ul>
<li>If you already know the commit SHA, easy.</li>
<li>If you know the commit message, <code>git log --grep=&#39;Versioning my secret&#39; # --all for all branches</code></li>
<li>If you know the commit content, <code>git grep mysecret $(git rev-list --all)</code></li>
<li>If you know which file contains your secret, <code>git blame file</code>, find line, get SHA, checkout SHA, blame, repeat until you get the first commit introducing the secret (don’t settle for the 20 following commits fiddling with this line’s whitespaces).</li>
<li>Choose whatever option gets you the SHA the quickest. The order listed here is not that bad in my opinion. So, your secret first appeared in your git repository at commit <code>054f345865f8f5a319dc05fcfa6cf9b76541e229</code></li>
</ul>
</li>
<li>You actually need the SHA of the previous commit (parent commit). The commit that came directly before the one you want to modify or get rid of.<ul>
<li><code>git rev-list --all | grep 054f345865f8f5a319dc05fcfa6cf9b76541e229 -A1 | tail -n1</code></li>
<li>So, the parent is <code>e20645764ce6419e348e6c1b5dea2348e18d050f</code></li>
</ul>
</li>
<li>We will use the parent as rebase starting point, meaning our bad commit will be the first one in the rebase process.<ul>
<li><code>git rebase -i e20645764ce6419e348e6c1b5dea2348e18d050f</code></li>
</ul>
</li>
<li>The first line should be your “bad” commit: <code>pick 054f345 versioning secret stuff!</code><ul>
<li>Replace <code>pick</code> with <code>edit</code>.</li>
<li>Close the editor to start rebasing.</li>
</ul>
</li>
<li>Your repo is now at the bad commit. Edit <code>yourfile</code> and remove your secret from it. Or delete <code>yourfile</code>.</li>
<li><code>git add yourfile</code></li>
<li><code>git commit --amend</code></li>
<li><code>git rebase --continue</code></li>
<li>Done!</li>
</ol>
<p>Note that if you simply want to <em>delete the bad commit</em> instead of <em>editing it to remove a secret from a file or remove a file from the commit</em>, this won’t work. Simply drop the commit when rebasing instead of <code>edit</code>ing it.</p>
<p>The first time I had to do that it took me quite some time to figure it out, and search engines weren’t that helpful.</p>
<p>If you have a complex history and would like to edit a bad merge or other weird cases AND if you like <em>choose your own adventure</em> books, take a look at this: <a href="http://sethrobertson.github.io/GitFixUm/fixup.html" target="_blank" rel="external">http://sethrobertson.github.io/GitFixUm/fixup.html</a>. It’s as awesome as it’s hard to navigate! :)</p>
<p>PS: I’m not responsible if you rewrite the history of a publicly traded github repository.<br>PPS: I’m now the very proud owner of a very useless domain name: <a href="http://☑.ml" target="_blank" rel="external">☑.ml</a>. (You can even append <code>/blog/</code> to get here. UTF-8 works!) Finally a URL I could handwrite without worrying about my handwriting (while worrying about the poor people who will try to type it in their browser instead)!</p>]]></content>
    
    <summary type="html">
    
      Here&#39;s how. But seriously, you probably shouldn&#39;t do it.
    
    </summary>
    
    
      <category term="git" scheme="https://vhf.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>One Simple Trick for JavaScript Performance Optimization</title>
    <link href="https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/"/>
    <id>https://vhf.github.io/blog/2016/01/15/one-simple-trick-for-javascript-performance-optimization/</id>
    <published>2016-01-15T00:20:12.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sorry for the clickbait. It’s so omnipresent these days, I <em>had</em> to try it. 90% of my daily Medium digest and 90% of my Pocket recommendations are like this. Note to self: write some kind of clickbait filtering software. Obtaining a huge training set should <strong>not</strong> be an issue. (We could even crowdsource these! How fun!)</p>
<p>Anyway. If you follow my blog (and I’m not sure you should), you might have guessed that I’m currently having fun with V8’s optimizing compiler, an awesome piece of software romantically called Crankshaft. Basically, it’s what makes JavaScript fast on Chrome/nodejs.</p>
<p>Most of the time Crankshaft is able to optimize JavaScript functions. They then run really fast.</p>
<p>In some cases, Crankshaft doesn’t optimize a function. It simply gets to a function and bails out instead of trying to optimize it. Whenever this happens, it invokes a <strong>bailout reason</strong>.</p>
<p>Documentation on these bailout reasons are very scarce, so Wednesday I decided to list them all and try to reproduce each of them, documenting why it occurs, giving advice on how to avoid the bailout, and give real-life examples of where it can be spotted.</p>
<p>As of the writing of this post, I was only able to partially document 8 of them. I have more material but need more research/more time.</p>
<p>If you’d like to see what I got and to contribute your awesome V8 knowledge, please see <strong><a href="https://github.com/vhf/v8-bailout-reasons" target="_blank" rel="external">V8 bailout reasons</a></strong> on GitHub.</p>
<p>But I didn’t make you read all this for nothing. In the title of this post I made a promise I intend to fulfill, so here is…</p>
<h3 id="One-Simple-Trick-for-JavaScript-Performance-Optimization"><a href="#One-Simple-Trick-for-JavaScript-Performance-Optimization" class="headerlink" title="One Simple Trick for JavaScript Performance Optimization"></a>One Simple Trick for JavaScript Performance Optimization</h3><p>Don’t use more than <del>65535</del> 512 parameters in a single JavaScript function. Otherwise, Crankshaft will bail out with the following informative message: “Too many parameters.”</p>
<h4 id="How-can-I-fix-my-JavaScript-code-to-make-it-run-blazingly-fast"><a href="#How-can-I-fix-my-JavaScript-code-to-make-it-run-blazingly-fast" class="headerlink" title="How can I fix my JavaScript code to make it run blazingly fast?"></a>How can I fix my JavaScript code to make it run blazingly fast?</h4><p>Stick to 511 parameters (or less).</p>
<ul>
<li>511 is a good-looking number. In unicode, it looks really really good: &#511;</li>
<li>A function with 511 parameters always looks better than a function with 512 parameters. (I have discovered a truly remarkable proof which this margin is too small to contain.)</li>
</ul>
<p><em>Note: I originally wrote this article with 65535 instead of 512. I did not pay enough attention while reading V8 source code. It was 65535 bits, i.e. 512 bytes, or 512 parameters. Not 65535 parameters. <a href="https://github.com/vhf/concise-notes/commit/88fc535cbe23a567ddd3e65f8f64c6590936a51b" target="_blank" rel="external">Review the diff</a>.</em></p>]]></content>
    
    <summary type="html">
    
      My attempt at clickbait. Also, an interesting (who said &quot;useless&quot;) JS performance tip.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Comment Syntax in Programming Languages (and the Eye of Osiris)</title>
    <link href="https://vhf.github.io/blog/2016/01/13/comment-syntax-in-programming-languages/"/>
    <id>https://vhf.github.io/blog/2016/01/13/comment-syntax-in-programming-languages/</id>
    <published>2016-01-13T18:19:19.000Z</published>
    <updated>2016-02-12T11:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>I witnessed an uncommon debate the other day. Someone was asking why programming languages don’t agree on a common syntax for comments.</p>
<p>Besides the usual indifferent answers such as “why would they”, “why should they”, and “it doesn’t matter in the least”, a couple of points were made:</p>
<ol>
<li>When designing a programming language, discussing the comment syntax is the ultimate form of <a href="https://en.wikipedia.org/wiki/Bikeshedding" target="_blank" rel="external">bikeshedding</a>.</li>
<li>An interesting corollary of <em>Parkinson’s law of triviality</em> is <a href="https://wiki.haskell.org/Wadler&#39;s_Law" target="_blank" rel="external">Wadler’s law of language design</a>, stating that when designing a programming language “twice as much time is spent discussing syntax than semantics, twice as much time is spent discussing lexical syntax than syntax, and twice as much time is spent discussing syntax of comments than lexical syntax.”</li>
</ol>
<p>In conclusion, why not just rip off <a href="https://vimeo.com/111122950" target="_blank" rel="external">Sketchy JS</a>‘ “Eye of Osiris” operator syntax introduced by James Mickens?</p>
<p class="pre-fake">{[~æ<br>this is a comment<br>*$€<img src="/blog/images/beyonce.jpg" alt="Beyonce" style="margin:none!important;display:inline-block;height:37px;width:39px;vertical-align:text-top"></p>
<p>(A curly brace, a square brace, a squiggle, and the combined AE character. Place your comment after the first part of the Eye of Osiris and close the Eye of Osiris using an asterisk, a dollar sign, a euro sign, and a tiny picture of Beyonce.)</p>]]></content>
    
    <summary type="html">
    
      Wadler&#39;s law is bikeshedding applied to programming languages design.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
    
      <category term="programming language design" scheme="https://vhf.github.io/blog/tags/programming-language-design/"/>
    
  </entry>
  
  <entry>
    <title>Making Babel fast with ES2015 rest parameters</title>
    <link href="https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/"/>
    <id>https://vhf.github.io/blog/2015/12/17/making-babel-fast-with-rest-parameters/</id>
    <published>2015-12-17T12:36:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a follow-up of <a href="http://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/">JavaScript performance with Babel and Node.js: a case against default parameters in tail call optimizations</a>. At the time, Babel 6 had only been published for a few hours.</p>
<p>When Babel 6 was released, I quickly realised that I kind of missed my target: tail call optimisation had been dropped in the process. But all was not lost, I could still investigate Babel’s use of <code>arguments</code>.</p>
<h1 id="Fixture-tests"><a href="#Fixture-tests" class="headerlink" title="Fixture tests"></a>Fixture tests</h1><p>First, I looked at a lot of fixture tests. These are files meant to test if a particular Babel transform or plug-in works properly. They consist of two files: <code>actual.js</code> (ES2015 code) and <code>expected.js</code>. The goal of this test is to check if the output of <code>babel actual.js</code> matches the content of <code>expected.js</code>.</p>
<p>I noticed something about a particular transform : <code>babel-plugin-transform-es2015-parameters</code>, more precisely about its handling of <code>rest</code> parameters:</p>
<figure class="highlight js"><figcaption><span>actual.js</span><a href="https://github.com/babel/babel/blob/82ddbc0ecd9a16fdb173bbcf85bc10ade6f9828d/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/actual.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = (...arrs) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> x = arrs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = arrs[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/82ddbc0ecd9a16fdb173bbcf85bc10ade6f9828d/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>This is unsafe. V8 will only be able to optimise the <code>concat</code> function if the <code>arguments</code> object has a length greater than 1. Otherwise, for example <code>concat([0])</code>, the attempt to access the undefined <code>arguments[1]</code> will force V8 to rematerialize <code>arguments</code> on the fly, preventing the whole function from being optimised.</p>
<h1 id="First-attempt"><a href="#First-attempt" class="headerlink" title="First attempt"></a>First attempt</h1><p>Having no idea about Babel’s codebase and internals, it took me a whole weekend to come up with a first patch: <a href="https://github.com/babel/babel/pull/2833" target="_blank" rel="external">#2833: Have es2015 rest transform safely use <code>arguments</code></a>. It fixed some of the rest-transformed unsafe use of <code>arguments</code> and it got merged after five weeks (which is way too long by the way, but I don’t blame anyone, I’m pretty sure it was an exceptional situation where someone said they would take care of this PR, then got busy, and in the meantime nobody saw the need to take over because someone was already in charge. No big deal).</p>
<p>At first I was pretty happy with this patch. The new <code>expected.js</code> looked like this:</p>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/9a97d92217dffcf6478611067c1525fa4004fce4/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-arrow-functions/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>.length &lt;= <span class="number">0</span> || <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>.length &lt;= <span class="number">1</span> || <span class="built_in">arguments</span>[<span class="number">1</span>] === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>which was safe. Some basic benchmarks were showing a 4x speedup. The tests were green. I had learned a lot about how Babel works.</p>
<p>Until <a href="https://github.com/babel/babel/pull/2833#discussion_r47472444" target="_blank" rel="external">someone noticed the pattern I was using was a bit weird</a>. In fact, the reason I initially chose this pattern was that I got it from <a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-es2015-parameters/src/default.js#L8-L11" target="_blank" rel="external">here</a>. While it makes sense to use it for default parameters handling (<code>ARGUMENTS.length &lt;= INDEX || ARGUMENTS[INDEX] === undefined ? DEFAULT_VALUE : ARGUMENTS[INDEX];</code>), it becomes overly complicated in the case where <code>DEFAULT_VALUE</code> is <code>undefined</code>.</p>
<h1 id="Second-attempt"><a href="#Second-attempt" class="headerlink" title="Second attempt"></a>Second attempt</h1><p>I was fixing this pattern issue, replacing it with <code>ARGUMENTS.length &lt;= INDEX ? undefined : ARGUMENTS[INDEX]</code>, when I noticed my previous patch was incomplete.</p>
<figure class="highlight js"><figcaption><span>actual.js</span><a href="https://github.com/babel/babel/blob/15969a09046a50ae2ae0503725b7fb00cdd7137f/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-multiple/actual.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span> (<span class="params">f, ...items</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    x = items[<span class="number">0</span>];</span><br><span class="line">    x = items[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>was still being converted to:</p>
<figure class="highlight js"><figcaption><span>expected.js</span><a href="https://github.com/babel/babel/blob/15969a09046a50ae2ae0503725b7fb00cdd7137f/packages/babel-plugin-transform-es2015-parameters/test/fixtures/parameters/rest-multiple/expected.js" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    x = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    x = <span class="built_in">arguments</span>[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The transform was not taking into account the presence of a rest parameter when there were other parameters involved (<code>function (f, ...items)</code>). After I fixed this issue, I had another one: <code>x = items[1]</code> was correctly transformed, but not <code>x[1] = ...</code>, <code>x.p = ...</code> or <code>... = items[1] || something</code>. I had to generalise the patch to (safely) cover all possible occurrences of accessing a value from a rest argument.</p>
<p>I added a fixture test, reworked my patch and opened a new PR: <a href="https://github.com/babel/babel/pull/3165" target="_blank" rel="external">Fixing T6818</a>.</p>
<figure class="highlight js"><figcaption><span>actual.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">f, g, ...items</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    <span class="keyword">var</span> y = g;</span><br><span class="line">    x[<span class="number">12</span>] = items[<span class="number">0</span>];</span><br><span class="line">    y.prop = items[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> z = items[<span class="number">2</span>] | <span class="number">0</span> || <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>expected.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = f;</span><br><span class="line">    <span class="keyword">var</span> y = g;</span><br><span class="line">    x[<span class="number">12</span>] = <span class="built_in">arguments</span>.length &lt;= <span class="number">2</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">2</span>];</span><br><span class="line">    y.prop = <span class="built_in">arguments</span>.length &lt;= <span class="number">3</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> z = (<span class="built_in">arguments</span>.length &lt;= <span class="number">4</span> ? <span class="literal">undefined</span> : <span class="built_in">arguments</span>[<span class="number">4</span>]) | <span class="number">0</span> || <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hopefully, this part is done. I’ll try to find some other Crankshaft-related-JS-anti-patterns in what Babel generates.</p>]]></content>
    
    <summary type="html">
    
      What I did to help avoid bailouts on rest parameters transpilation.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="babel" scheme="https://vhf.github.io/blog/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript performance with Babel and Node.js: a case against default parameters in tail call optimizations</title>
    <link href="https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/"/>
    <id>https://vhf.github.io/blog/2015/11/02/javascript-performance-with-babel-and-node-js/</id>
    <published>2015-11-02T12:36:59.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Disclaimer:</p>
<ul>
<li>Babel 5.8.29 (babel-core 5.8.33)</li>
<li>Node.js v5.0.0</li>
<li>I know these factorial examples are very artificial, please bear with me, I’ll explain how I came to look at those things at the end of this post</li>
<li>The title of this post might be incorrect (or too specific), I’ll also talk about it later</li>
<li>Optimization is not an obsession of mine. Having fun with JavaScript is.</li>
</ul>
<p>Here are three recursive implementations of the factorial function:</p>
<figure class="highlight js"><figcaption><span>tail-call.js</span><a href="https://gist.github.com/vhf/25eebd0aa0ca5b3c1aec#file-tail-call-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "naive"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * factorial1(x<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail rec using a default parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec2(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec2</span>(<span class="params">x, acc = 1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> facRec2(x<span class="number">-1</span>, x*acc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tail rec</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec3(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec3</span>(<span class="params">x, acc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> facRec3(x<span class="number">-1</span>, x*acc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Which one do you think will perform better when transpiled into ES5, transformed by Babel’s tail call optimization (TCO for short), and run on Node.js (therefore V8)?</p>
<p>It would be reasonable to expect:</p>
<ul>
<li>#1 to be the slowest because there’s no tail call (therefore TCO does not happen)</li>
<li>#2 and #3 to perform better than #1 (because TCO)</li>
<li>#2 and #3 to be more or less equivalent in terms of performances</li>
</ul>
<p>Let’s <a href="https://github.com/bestiejs/benchmark.js" target="_blank" rel="external">benchmark</a> it (<a href="https://gist.github.com/vhf/ecd9dba814a4edd80680" target="_blank" rel="external">suite</a>): <code>babel tail-call.js &gt; tail-call-babel.js; node tail-call-babel.js</code></p>
<pre><code>#1 no tail call          x 1,562,075 ops/sec ±0.59% (98 runs sampled)
#2 TCO/default params    x   259,399 ops/sec ±0.92% (91 runs sampled)
#3 TCO/no default params x 7,046,389 ops/sec ±0.45% (101 runs sampled)
Fastest is #3 TCO/no default params
</code></pre><ul>
<li>#3 is 27x (!) better than #2</li>
<li>Even #1 significantly outperforms #2</li>
</ul>
<p>So my quest began. What could be so wrong about #2?</p>
<p>The obvious thing to do at this point was to look at Babel’s output:</p>
<figure class="highlight js"><figcaption><span>tail-call-babel.js</span><a href="https://gist.github.com/vhf/d9e9750ae25e9dee6190#file-tail-call-babel-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// #1 "naive"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * factorial1(x - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2 tail rec using a default parameter</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec2(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec2</span>(<span class="params">_x2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">var</span> _again = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _function: <span class="keyword">while</span> (_again) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = _x2;</span><br><span class="line">    _again = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> acc = _arguments.length &lt;= <span class="number">1</span> || _arguments[<span class="number">1</span>] === <span class="literal">undefined</span> ? <span class="number">1</span> : _arguments[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _arguments = [_x2 = x - <span class="number">1</span>, x * acc];</span><br><span class="line">      _again = <span class="literal">true</span>;</span><br><span class="line">      acc = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">continue</span> _function;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3 tail rec</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> facRec3(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facRec3</span>(<span class="params">_x3, _x4</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _again2 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  _function2: <span class="keyword">while</span> (_again2) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = _x3,</span><br><span class="line">        acc = _x4;</span><br><span class="line">    _again2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _x3 = x - <span class="number">1</span>;</span><br><span class="line">      _x4 = x * acc;</span><br><span class="line">      _again2 = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span> _function2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>My first reflex was to check if TCO happened. Yes, and it did a fine job at transforming both tail recursive functions <code>facRec2</code> and <code>facRec3</code> into iterative functions. (If <code>factorial2</code> uses an iterative <code>facRec2</code>, why would <code>factorial1</code> and its still-recursive implementation perform better? It’s nice to know that <code>factorial2</code> won’t bark <code>RangeError: Maximum call stack size exceeded</code> at me, but at what cost?)</p>
<p>The next obvious thing to do was to consider the only single little difference between <code>facRec2</code> and <code>facRec3</code> in the original code: the use of an ES6 default parameter. A quick glance at Babel’s output made the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="external"><code>arguments</code></a>stand out.</p>
<p>I remembered reading about <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="external">V8 “optimization killers”</a>, particularly a bit about <code>arguments</code>. Let me summarize the third section in the form of a checklist with regards to how the transformed <code>facRec2</code> makes use of parameters and <code>arguments</code>:</p>
<ul>
<li>[ ] Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</li>
<li>[x] Don’t leak <code>arguments</code></li>
<li>[x] Don’t assign to <code>arguments</code></li>
<li>[x] Don’t use <code>arguments</code> directly without <code>.length</code> or <code>[]</code></li>
<li>[x] Don’t <code>arguments[i]</code> with <code>i</code> not an integer or <code>i &gt; arguments.length-1</code></li>
<li>[x] Don’t do anything else than <code>fn.apply(y, arguments)</code></li>
</ul>
<p>Notice how <code>facRec2</code> does <code>_x2 = x - 1</code> although <code>_x2</code> is a defined parameter <em>and</em> <code>arguments</code> is mentioned in the function body? It contradicts the first rule.</p>
<p>I turned to V8. Here again, the awesome bluebird wiki page was very helpful: its first section, <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#1-tooling" target="_blank" rel="external">tooling</a>, had been my reference for some time.</p>
<p>I added:</p>
<figure class="highlight js"><figcaption><span>tail-call-babel-v8.js</span><a href="https://gist.github.com/vhf/01c095e09accf72108a1#file-tail-call-babel-v8-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStatus</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = fn.name;</span><br><span class="line">  <span class="keyword">switch</span>(%GetOptimizationStatus(fn)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">console</span>.log(name, <span class="string">' is optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">console</span>.log(name, <span class="string">' is not optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">console</span>.log(name, <span class="string">' is always optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">console</span>.log(name, <span class="string">' is never optimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">console</span>.log(name, <span class="string">' is maybe deoptimized'</span>); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(factorial1);</span><br><span class="line">factorial1(<span class="number">100</span>);</span><br><span class="line">printStatus(factorial1);</span><br><span class="line"></span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>); <span class="comment">// I should add that facRec2(100) leads to the same perf issue</span></span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(facRec2);</span><br><span class="line">facRec2(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">printStatus(facRec2);</span><br><span class="line"></span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">%OptimizeFunctionOnNextCall(facRec3);</span><br><span class="line">facRec3(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">printStatus(facRec3);</span><br></pre></td></tr></table></figure>
<p>at the end of <code>tail-call-babel.js</code> and ran the following:</p>
<pre><code>node --allow-natives-syntax tail-call-babel.js
  factorial1 is optimized
  facRec2 is not optimized
  facRec3 is optimized
</code></pre><p>It was clear that V8 — more precisely <a href="http://jayconrod.com/posts/54/a-tour-of-v8-crankshaft-the-optimizing-compiler" target="_blank" rel="external">Crankshaft</a> — was bailing out on <code>facRec2</code>.</p>
<p>I simply had to refactor <code>facRec2</code> to make it stop reassigning to <code>_x2</code>, right? Nope, <code>facRec2</code> still could not be optimized. Here’s a <a href="https://gist.github.com/vhf/5560a6502d5147a766f6" target="_blank" rel="external">gist</a>.</p>
<p>Going back to the checklist, I noticed that <code>facRec2</code> actually assigns to the <code>_arguments</code> object, which is a reference to <code>arguments</code>, which also contradicts something from the above checklist: Don’t assign to <code>arguments</code>.</p>
<p>Going back to the <code>facRec2</code> generated code, I copied it to create <code>facRec2b</code>, replacing <code>var _arguments = arguments;</code> with <code>var $_len = arguments.length; var _arguments = new Array($_len); for(var $_i = 0; $_i &lt; $_len; ++$_i) {_arguments[$_i] = arguments[$_i];}</code> (<a href="https://gist.github.com/vhf/58769c1d0462094a66a3" target="_blank" rel="external">full gist</a>). And V8 was happy: <code>facRec2b is optimized</code>.</p>
<p>New benchmark:</p>
<pre><code>#1 no tail call               x 1,562,300 ops/sec ±0.44% (98 runs sampled)
#2 TCO/default params + leak  x   256,521 ops/sec ±0.96% (95 runs sampled)
#2 TCO/default params no leak x   812,920 ops/sec ±0.83% (94 runs sampled)
#3 TCO/no default params      x 7,060,279 ops/sec ±0.49% (94 runs sampled)
</code></pre><p>When optimized by V8, <code>facRec2b</code> runs already 3x faster than its <code>facRec2</code> counterpart, but still ~2x slower than <code>factorial1</code>, and their performances cannot be matched with <code>facRec3</code>.</p>
<p>Here were my initial conclusions:</p>
<ul>
<li>assigning to <code>_arguments</code>, which references <code>arguments</code>, is what prevents V8 from optimizing <code>facRec2</code></li>
<li>safely converting <code>arguments</code> to an array fixes this issue</li>
<li>even with this fix, <code>facRec2b</code> is still so slow that we should simply decide not to use default parameters in any function susceptible to be TCOed by Babel</li>
<li>is there a better way to get V8 to optimize <code>facRec2</code>?</li>
<li>what’s up with this <em>Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</em> rule? I thought <a href="https://gist.github.com/vhf/a884c556a70bdcf21fbc" target="_blank" rel="external">this</a> would trigger an <em>Assignment to parameter in arguments object</em> but I could not make it happen. Answer at the end of this post.</li>
</ul>
<p>Was there more to it?</p>
<p>I took a closer look:</p>
<pre><code>node --trace-opt --trace_deopt --allow-natives-syntax tail-call-babel.js | grep facRec2 | grep -v facRec2b
  [compiling method 0x11469d0922c1 &lt;JS Function facRec2 (SharedFunctionInfo 0x24a5614171a9)&gt; using Crankshaft]
  [aborted optimizing 0x11469d0922c1 &lt;JS Function facRec2 (SharedFunctionInfo 0x24a5614171a9)&gt; because: Unsupported phi use of arguments]
  [disabled optimization for 0x24a5614171a9 &lt;SharedFunctionInfo facRec2&gt;, reason: Unsupported phi use of arguments]
</code></pre><p>Unsupported phi use of arguments. At this point I should probably say that I don’t know much about V8 internals or source code. However, I was still determined to know what was wrong with <code>facRec2</code>, so I tried looking for this cryptic <code>Unsupported phi use of arguments</code> thing on Google (after all, they are the most qualified for this particular request).</p>
<p>It’s not every day that one of my search engine requests only returns 11 results. The most interesting one is probably <a href="https://codereview.chromium.org/7553006" target="_blank" rel="external">the very commit that introduced this bailout reason</a>. I took a quick glance at <code>HGraph::CheckPhis</code>: something about blocks?</p>
<p>I thought I would learn more trying to write a minimal program reproducing this bailout reason. But that was not an easy task. What I ended up with are these three functions:</p>
<figure class="highlight js"><figcaption><span>unsupported-phi-use-of-arguments.js</span><a href="https://gist.github.com/vhf/5f88c10e2a0680a4fb19#file-unsupported-phi-use-of-arguments-js" target="_blank" rel="external">gist</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> === <span class="number">0</span>) &#123; <span class="comment">// anything evaluating to true, except a number or `true`</span></span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">var</span> again = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span> (again) &#123;</span><br><span class="line">    _arguments = [<span class="number">0</span>]; <span class="comment">// Unsupported phi use of arguments</span></span><br><span class="line">    again = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HGraph::CheckPhis</code> started to make sense: reassigning <code>arguments</code> inside a “block” triggers <em>Unsupported phi use of arguments</em>. But assigning <em>to</em> <code>arguments</code> does not: it triggers a <em>Bad value context for arguments value</em>, which is already covered on <a href="http://bahmutov.calepin.co/detecting-function-optimizations-in-v8.html" target="_blank" rel="external">blogs</a> and <a href="http://stackoverflow.com/questions/29198195/whats-the-deal-with-optimising-arguments" target="_blank" rel="external">StackOverflow</a>.</p>
<h3 id="So-what’s-your-point-Conclusion"><a href="#So-what’s-your-point-Conclusion" class="headerlink" title="So, what’s your point? Conclusion."></a>So, what’s your point? Conclusion.</h3><p>I just wanted to practice my storytelling. And also, I wanted to raise this question: what can we do about this whole default-parameter-TCO-V8-thing? I’m not sure, so here are a few questions I would like to ask you:</p>
<ul>
<li>Should we just avoid using default parameters in any function susceptible to be TCOed by Babel? (in this example, x27 on V8)</li>
<li>or make Babel safely create an array from <code>arguments</code> in such cases? (x3)</li>
<li>or at least mention this thing in Babel’s doc as soon as Babel 6 unblacklists <code>es6.tailCall</code>? (If this ever happens? If you have informations about this blacklisting, I’d love to know!)</li>
</ul>
<p><strong>I’d love to get your opinion on these questions!</strong></p>
<p>In a very interesting <a href="https://devchat.tv/js-jabber/171-jsj-babel-with-sebastian-mckenzie" target="_blank" rel="external">recent podcast</a> ([<a href="http://devchat.cachefly.net/javascriptjabber/transcript-171-jsj-babel-with-sebastian-mckenzie-js-jabber.pdf" target="_blank" rel="external">transcript</a>]), Babel’s author Sebastian McKenzie said several things about Babel’s performances, and how outputting more performant code impacts its readability, and how that’s ok because the focus is on performance: “would you care more about your code being pretty or your code being as fast as possible?”, and I agree, it is certainly more important for Babel to be fast than readable.</p>
<p>But he also said the following: “But now it’s just like you really shouldn’t be reading your compiled code anyway.” I have to disagree. In fact, if you indeed care about performances, you most probably <em>should</em> be reading your compiled code. (Now, don’t get met wrong: I think Babel is an awesome piece of software and I love it and I use it everywhere and Sebastian McKenzie et al. are doing a terrific job, and if you think this post is bashing Babel you’re just plain wrong. This disclaimer is probably useless, but I’m new to blogging and it’s kind of scary.)</p>
<p>I would love Babel to improve on this specific point; I can’t promise anything but I’ll try to hack on it. And if it gets me somewhere, I’ll try to write it up. My storytelling needs practice.</p>
<h4 id="Unsupported-phi-use-of-arguments"><a href="#Unsupported-phi-use-of-arguments" class="headerlink" title="Unsupported phi use of arguments"></a>Unsupported phi use of arguments</h4><p>Unsatisfied of my poor understanding of this Crankshaft bailout message I reached out to <a href="http://mrale.ph" target="_blank" rel="external">Vyacheslav Egorov</a>, who first introduced it and promptly clarified he did not add the bailout itself.</p>
<p>I asked him what does <code>blocks_</code> contain in the <code>HGraph::CheckPhis</code> function I mentioned earlier:</p>
<blockquote>
<p>Blocks will contain CFG (control flow graph) blocks — these are not blocks in the syntactical sense, e.g. <code>x ? y : z</code> is not a block in JavaScript but will be 4 blocks in the CFG — once optimizing compiler gets to it.</p>
</blockquote>
<p>What’s up with this <em>Don’t reassign defined parameters while also mentioning <code>arguments</code> in the body of a function</em> rule? Why does <a href="https://gist.github.com/vhf/a884c556a70bdcf21fbc" target="_blank" rel="external">this code</a> not trigger a bailout?</p>
<blockquote>
<p>This limitation is still there — but it does not apply to strict functions. I think you somehow run your code in strict mode that’s why you don’t see a bailout.</p>
</blockquote>
<p>Indeed, I ran my tests in strict mode.</p>
<p>Regarding the second point of my conclusion, he said:</p>
<blockquote>
<p>Allocating array (and hope it will get handled by some optimization pass in the V8) is a bad idea.</p>
</blockquote>
<p>Thanks to Vyacheslav, this bailout message starts to make sense to me. He could have only answered the few questions I sent him by email. Instead, he was kind enough to answer them, read a draft of this blog post, and even went on to write a thorough and clear explaination of <em>Unsupported phi use of arguments</em> on his blog: <a href="http://mrale.ph/blog/2015/11/02/crankshaft-vs-arguments-object.html" target="_blank" rel="external">Crankshaft vs arguments object</a> — which I still need to digest.</p>
<h4 id="A-few-side-notes"><a href="#A-few-side-notes" class="headerlink" title="A few side notes"></a>A few side notes</h4><ul>
<li><a href="https://github.com/babel/babel/tree/v5.8.33/packages/babel/test/fixtures/transformation/es6.tail-call/recursion" target="_blank" rel="external">es6.tailCall recursion test case including default parameter</a>: Interesting test case with regards to V8 optimization: first because <code>_x2</code> (a defined parameter) gets reassigned which triggers <em>Assignment to parameter in arguments object</em> bailout reason, secondly because if we <code>var __x2 = _x2</code> and don’t reassign <code>_x2</code> we get the infamous <em>Unsupported phi use of arguments</em>.</li>
<li>Why the title of this post might be too specific: I have not investigated (yet?) whether <em>Unsupported phi use of arguments</em> is only triggered by Babel generated ES5 in the specific <em>TCO + default parameter</em> case or is also present in other Babel generated ES5 <em>default parameter</em> cases.</li>
<li>Why these artifical examples: because they are short and easy to reason about. Also, cf. the following point:</li>
<li>How did you come up with this thing? One of might projects depends on underscore, which does not have an equivalent of <a href="https://lodash.com/docs#get" target="_blank" rel="external"><code>get</code></a>. So I quickly drafted the tail rec <code>_.get</code> I was dreaming of, then googled for a bit and found John-David Dalton’s <a href="https://github.com/jashkenas/underscore/issues/2268#issuecomment-128731431" target="_blank" rel="external"><code>_.reduce(path, _.partial(_.result, _, _, void 0), object)</code></a>(which felt like too much black magic for me). But me being curious and it being a cold evening, I benchmarked both solutions. And mine was awfully slow. So I asked V8 about it, discovered the <em>phi</em> thing, reimplemented my recursive <code>get</code> without its default parameter, ran the benchmark again and got this: <code>TCO 676,411(±0.43%) | 674,426(±0.49%) JDD</code>. So, basically the same performances. Underscore never fails to impress me! Which led to two things: 1/ I kept my nice recursive <code>get</code> because it’s more readable, 2/ I spent my weekend researching+writing this blog post.</li>
<li>I know I should probably not rely on this benchmark package and should do cpu profiling instead, and that it’s easy to do with V8, etc. I think the timing differences shown here are big enough to decide that for this particular post, benchmark is good enough. But I’ll do better next time.</li>
</ul>]]></content>
    
    <summary type="html">
    
      Babel might prevent some V8 optimizations to happen. Also, have you heard about Unsupported Phi Use of Arguments?
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="v8" scheme="https://vhf.github.io/blog/tags/v8/"/>
    
      <category term="crankshaft" scheme="https://vhf.github.io/blog/tags/crankshaft/"/>
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
      <category term="babel" scheme="https://vhf.github.io/blog/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Destructuring</title>
    <link href="https://vhf.github.io/blog/2015/10/28/es6-destructuring/"/>
    <id>https://vhf.github.io/blog/2015/10/28/es6-destructuring/</id>
    <published>2015-10-28T14:29:42.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Destructuring works exactly as its syntax suggests</li>
<li>The only tricky point is object destructuring without variable declaration<ul>
<li>with declaration: <code>let {x: a} = {x: &#39;a&#39;};</code></li>
<li>without declaration: <code>({x: a} = {x: &#39;a&#39;});</code> (assuming that <code>a</code> has already been declared)</li>
<li>It’s simply because <a href="http://stackoverflow.com/questions/17382024/why-is-a-bare-array-valid-javascript-syntax-but-not-a-bare-object" target="_blank" rel="external">a bare object is not valid syntax</a></li>
</ul>
</li>
<li>Default arguments and destructuring:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* prop === 'default' */</span> <span class="keyword">let</span> &#123; prop = <span class="string">'default'</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="comment">/* prop === 'value' */</span>   <span class="keyword">let</span> &#123; prop = <span class="string">'default'</span> &#125; = &#123; prop: <span class="string">'value'</span> &#125;;</span><br><span class="line"><span class="comment">/* name === 'value' */</span>   <span class="keyword">let</span> &#123; prop: name = <span class="string">'default'</span> &#125; = &#123; prop: <span class="string">'value'</span> &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>Default arguments also work for arrays:<ul>
<li><code>let [head = &quot;default&quot;] = [];</code></li>
</ul>
</li>
<li>Default values for destructuring assignment is especially useful as function arguments defaults:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> destructObject = (&#123; a = <span class="string">'a'</span>, b = <span class="string">'b'</span> &#125; = &#123;&#125;) =&gt; [a, b];</span><br><span class="line"><span class="keyword">let</span> destructObject = (&#123; a: arg1 = <span class="string">'a'</span>, b: arg2 = <span class="string">'b'</span> &#125; = &#123;&#125;) =&gt; [arg1, arg2];</span><br><span class="line">destructObject(&#123;&#125;);       <span class="comment">// ['a', 'b]</span></span><br><span class="line">destructObject(&#123; b: <span class="string">'c'</span> &#125;); <span class="comment">// ['a', 'c']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      A few things about destructuring and assigning default values.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Promises</title>
    <link href="https://vhf.github.io/blog/2015/10/27/javascript-promises/"/>
    <id>https://vhf.github.io/blog/2015/10/27/javascript-promises/</id>
    <published>2015-10-27T18:37:41.000Z</published>
    <updated>2016-02-03T22:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>I read <a href="https://60devs.com/best-practices-for-using-promises-in-js.html" target="_blank" rel="external">Best Practices for Using Promises in JS</a>. Here are some concise notes expanding on this topic.</p>
<ul>
<li>Let’s use bluebird as Promise implementation for node</li>
<li>Use <code>.then().catch()</code> instead of <code>.then(successCb, failCb)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = (shouldResolve) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldResolve) &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject();</span><br><span class="line">  &#125;&#125;);</span><br><span class="line"></span><br><span class="line">promise(arg)</span><br><span class="line">  .then(() =&gt; &#123; <span class="comment">/* success */</span> &#125;)</span><br><span class="line">  .catch(ExceptionToCatch, OtherExceptionToCatch, (err) =&gt; &#123; <span class="comment">/* error */</span>&#125;)</span><br><span class="line">  .catch(StrangeExceptionToCatch, (err) =&gt; &#123; <span class="comment">/* error */</span>&#125;)</span><br><span class="line">  .catch((err) =&gt; &#123; <span class="comment">/* error */</span>&#125;); <span class="comment">// default</span></span><br></pre></td></tr></table></figure>
<p>To define an exception to catch:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCustomError</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">MyCustomError.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Error</span>.prototype);</span><br><span class="line"></span><br><span class="line">promise(arg)</span><br><span class="line">  .then(() =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> MyCustomError() &#125;)</span><br><span class="line">  .catch(MyCustomError, (err) =&gt; &#123;&#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Promise.all([promiseA(a), promiseB(b)])</code> runs two async functions in parallel, but <code>.then(() =&gt; {})</code> callback has no data result argument</li>
<li>Use <code>.spread</code> instead of <code>.then</code> to get this data: <code>.spread((dataA, dataB) =&gt; {})</code></li>
<li>To limit concurrency, <code>Promise.map([lotsOfStuff], promise, { concurrency: 3 }).then(() =&gt; {})</code></li>
<li>See also <code>.reduce</code> and <code>.filter</code></li>
<li>You can “pipe” your <code>.then</code> functions. If you do this, you should probably avoid using anonymous functions and enjoy more reusability, modularity, testability, readability</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readFile(data)</span><br><span class="line">  .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">  .then(treatStuff)</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<ul>
<li>Don’t abuse this thing. It’s nice to read, but it breaks the event loop and could introduce race conditions</li>
<li>A better approach is to pipe inside the <code>.then</code>:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readFile(data)</span><br><span class="line">  .then(pipe(<span class="built_in">JSON</span>.parse, treatStuff))</span><br><span class="line">  .catch(handleError)</span><br></pre></td></tr></table></figure>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading:"></a>Further reading:</h2><ul>
<li><a href="http://bluebirdjs.com" target="_blank" rel="external">http://bluebirdjs.com</a></li>
<li><a href="https://promise-nuggets.github.io" target="_blank" rel="external">https://promise-nuggets.github.io</a></li>
<li><a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="external">http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html</a></li>
<li><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md" target="_blank" rel="external">https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      Promises, and what bluebird can do to help.
    
    </summary>
    
      <category term="programming" scheme="https://vhf.github.io/blog/categories/programming/"/>
    
      <category term="JavaScript" scheme="https://vhf.github.io/blog/categories/programming/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://vhf.github.io/blog/tags/javascript/"/>
    
      <category term="es2015" scheme="https://vhf.github.io/blog/tags/es2015/"/>
    
      <category term="promises" scheme="https://vhf.github.io/blog/tags/promises/"/>
    
      <category term="nodejs" scheme="https://vhf.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
</feed>
